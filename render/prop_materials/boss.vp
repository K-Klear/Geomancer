attribute highp vec4 position;
attribute mediump vec3 normal;

uniform mediump mat4 mtx_worldview;
uniform mediump mat4 mtx_proj;
uniform mediump mat4 mtx_world;
uniform mediump vec4 flash;

varying mediump vec3 var_normal;
varying mediump vec2 var_texcoord0;
varying mediump float d;
varying mediump float f;
varying mediump vec4 pos_worldview;

float determinant(mat4 m) {
    float
    b00 = m[0][0] * m[1][1] - m[0][1] * m[1][0],
    b01 = m[0][0] * m[1][2] - m[0][2] * m[1][0],
    b02 = m[0][0] * m[1][3] - m[0][3] * m[1][0],
    b03 = m[0][1] * m[1][2] - m[0][2] * m[1][1],
    b04 = m[0][1] * m[1][3] - m[0][3] * m[1][1],
    b05 = m[0][2] * m[1][3] - m[0][3] * m[1][2],
    b06 = m[2][0] * m[3][1] - m[2][1] * m[3][0],
    b07 = m[2][0] * m[3][2] - m[2][2] * m[3][0],
    b08 = m[2][0] * m[3][3] - m[2][3] * m[3][0],
    b09 = m[2][1] * m[3][2] - m[2][2] * m[3][1],
    b10 = m[2][1] * m[3][3] - m[2][3] * m[3][1],
    b11 = m[2][2] * m[3][3] - m[2][3] * m[3][2];
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}

void main()
{
    vec4 distort = vec4(normal.xyz, 0.0) * (0.01 + 0.04 * flash.x);
    
    vec4 p = mtx_worldview * (vec4(position.xyz, 1.0) + distort);

    d = determinant(mtx_worldview);
    vec4 pos = mtx_world * (vec4(position.xyz, 1.0) + distort);
    
    var_normal = normalize((mtx_world * vec4(normal.xyz, 0.0)).xyz);

    vec4 up = vec4(0.0, 1.0, 0.0, 0.0);
    vec4 fwd = vec4(var_normal.xyz, 0.0);
    vec4 right = vec4(normalize(cross(fwd.xyz, up.xyz)), 0.0);
    up = vec4((cross(right.xyz, fwd.xyz)), 0.0);
    mat4 rot = mat4(right, up, fwd, vec4(0.0, 0.0, 0.0, 1.0));

    var_texcoord0 = (pos * rot).xy * 0.25;
    if (abs(var_normal.y) > 0.9999)
    {
        var_texcoord0 = pos.xz * 0.25;
    }

    f = flash.x;
    pos_worldview = p;
    
    gl_Position = mtx_proj * p;
}

