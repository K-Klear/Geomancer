local gooey = require "gooey.gooey"
local dirtylarry = require "gooey-dirtylarry.dirtylarry"

local string_start = "{\"NORMALSection\":[{\"name\":\"Empty\",\"distance\":\"-12\",\"properties\":[{\"startUnit\":\"-12\"}]}],\"Volume\":["
local string_end = "],\"Decor\":[],\"DecorGroups\":[]}"
local vol_1 = "{\"type\":\""
local vol_1b= "\",\"offset\":\"("
local vol_2 = ")\",\"scale\":\"("
local vol_3 = ")\",\"worldPosition\":\"("
local vol_4 = ")\",\"localScale\":\"("
local vol_5 = ")\",\"groupIndex\":\""
local vol_6 = "\",\"processingOrder\":\""
local vol_7 = "\"}"

local walkway = "{\"type\":\"Subtractive\",\"offset\":\"(-1, -1, -4)\",\"scale\":\"(2, 1, 249)\",\"worldPosition\":\"(0.00, -0.25, 60.25)\",\"localScale\":\"(1.00, 0.50, 124.50)\",\"groupIndex\":\"1\",\"processingOrder\":\"1000\"},"

local comma = ", "
local volume_type = {[true] = "Additive", [false] = "Subtractive"}

local image_data = {}
local max_image_z = 1800

local filter = 0
local threshold = 128
local invert = false
local create_additive = true
local create_subtractive = false

local min_x, max_x = 0, 165
local min_y, max_y = 0, 165
local offset_x, offset_y = 0, 0

local z_depth = 1
local processing_order = "1500"

local volumes = {}

local preview_node, message_box, crop_stencil, range_box
local current_preview = 0

local function is_geo(pixels, width, x, y)
	local index = y * width * 4 + x * 4 + 1
	local value = pixels[index + filter]
	if invert then
		return value < threshold
	end
	return value > threshold
end

local function get_volume(pos_x, pos_y, pos_z, scale_x, scale_y, scale_z, group_index, is_additive)
	local vol = vol_1..volume_type[is_additive]..vol_1b..tostring(pos_x)..comma..tostring(pos_y)..comma..tostring(pos_z)..vol_2..tostring(scale_x)..comma..tostring(scale_y)..comma..tostring(scale_z)
	vol = vol..vol_3..tostring(((scale_x * 0.5) + pos_x) * 0.5)..comma..tostring(((scale_y * 0.5) + pos_y) * 0.5)..comma..tostring(((scale_z * 0.5) + pos_z) * 0.5)
	vol = vol..vol_4..tostring(scale_x * 0.5)..comma..tostring(scale_y * 0.5)..comma..tostring(scale_z * 0.5)..vol_5..group_index..vol_6..processing_order..vol_7
	return vol
end

local function add_warning(err)

end

local function set_preview_image(image)
	current_preview = image or current_preview
	gui.set_texture(preview_node, tostring(image_data[current_preview].z))
end

local function load_images()
	for key, val in ipairs(image_data) do
		gui.delete_texture(tostring(val.z))
	end
	image_data = {}
	local _w, _h
	for z = -16, max_image_z do
		local filename = "input/"..tostring(z)..".png"
		local f = io.open(filename, "rb")
		if f then
			local image = f:read("*a")
			local buf, w, h = png.decode_rgba(image, true)
			local pixels = buffer.get_stream(buf, hash("pixels"))
			
			gui.new_texture(tostring(z), w, h, "rgba", buffer.get_bytes(buf, hash("pixels")), true)
			
			table.insert(image_data, {pixels = pixels, w = w, h = h, z = z})
			if not _w then
				_w = w; _h = h
			elseif not ((_w == w) and (_h == h)) then
				add_warning(hash("size_mismatch"))
				if _w > w then
					_w = w
				end
				if _h > h then
					_h = h
				end
			end
		end
	end
	max_x = _w; max_y = _h
	if #image_data < 1 then
		gui.set_text(message_box, "No files found in the input directory.")
	else
		gui.set_text(message_box, tostring(#image_data).." images loaded.")
		set_preview_image(1)
	end
end

local function divide_picture(index)
	local pixel_values = {}
	local width = max_x - min_x
	local height = max_y - min_y
	for i = 1, width * height do
		table.insert(pixel_values, is_geo(image_data[index].pixels, image_data[index].w, (i - 1) % width, math.floor((i - 1) / width)))
	end
	for starting_pixel = 1, width * height do
		if not (pixel_values[starting_pixel] == nil) then
			local volume_width = 1
			local volume_height = 0
			local is_additive = pixel_values[starting_pixel]
			pixel_values[starting_pixel] = nil
			repeat
				if (starting_pixel + volume_width - 1) % width == 0 then
					break
				end
				if pixel_values[starting_pixel + volume_width] == is_additive then
					pixel_values[starting_pixel + volume_width] = nil
					volume_width = volume_width + 1
				else
					break
				end
			until false
			local height_found
			repeat
				volume_height = volume_height + 1
				for i = 1, volume_width do
					if not (pixel_values[starting_pixel + width * volume_height + i - 1] == is_additive) then
						height_found = true
						break
					end
				end
				if not height_found then
					for i = 1, volume_width do
						pixel_values[starting_pixel + width * volume_height + i - 1] = nil
					end
				end
			until height_found
			if (is_additive and create_additive) or (create_subtractive and not is_additive) then
				local x = -83 + min_x + offset_x + (starting_pixel - 1) % width
				local y = -80 + min_y + offset_y + math.floor(starting_pixel / width)
				table.insert(volumes, get_volume(x, y, image_data[index].z, volume_width, volume_height, z_depth, index + 1, is_additive))
			end
			--table.insert(volume_list, {starting_pixel = starting_pixel, w = volume_width, h = volume_height, type = is_additive})
		end
	end
end

function init(self)
	msg.post(".", hash("acquire_input_focus"))
	gooey.checkbox("additive/box").set_checked(true)
	gooey.input("depth/text", gui.KEYBOARD_TYPE_DEFAULT).set_text("1")
	gooey.input("min_x/text", gui.KEYBOARD_TYPE_DEFAULT).set_text("0")
	gooey.input("max_x/text", gui.KEYBOARD_TYPE_DEFAULT).set_text("165")
	gooey.input("min_y/text", gui.KEYBOARD_TYPE_DEFAULT).set_text("0")
	gooey.input("max_y/text", gui.KEYBOARD_TYPE_DEFAULT).set_text("165")
	preview_node = gui.get_node("preview")
	message_box = gui.get_node("message_box")
	crop_stencil = gui.get_node("crop_stencil")
	range_box = gui.get_node("range_box")
end

local function update_button(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("button_normal"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("button_over"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("button_normal"))
	end
end

local function set_stencil_size()
	local w = (max_x - min_x) * 3 + 3
	local h = (max_y - min_y) * 3 + 3
	gui.set_size(crop_stencil, vmath.vector3(w, h, 1))
	gui.set_position(crop_stencil, vmath.vector3(-249 + (min_x * 3), -249 + (min_y * 3), 0))
	gui.set_position(range_box, vmath.vector3(min_x * -3, min_y * -3, 0))
end

local function update_input(input)
	if input.node_id == hash("depth/text") then
		local value = tonumber(input.text)
		if not value or value < 1 then
			value = 1
			gooey.input("depth/text", gui.KEYBOARD_TYPE_DEFAULT).set_text(tostring(value))
		end
		z_depth = value
	elseif input.node_id == hash("min_x/text") then
		local value = tonumber(input.text)
		local max_value = tonumber(gui.get_text(gui.get_node("max_x/text")))
		if not value or value < 0 then
			value = 0
			gooey.input("min_x/text", gui.KEYBOARD_TYPE_DEFAULT).set_text(tostring(value))
		elseif not (value < max_value) then
			value = max_value - 1
			gooey.input("min_x/text", gui.KEYBOARD_TYPE_DEFAULT).set_text(tostring(value))
		end
		min_x = value
		set_stencil_size()
	elseif input.node_id == hash("min_y/text") then
		local value = tonumber(input.text)
		local max_value = tonumber(gui.get_text(gui.get_node("max_y/text")))
		if not value or value < 0 then
			value = 0
			gooey.input("min_y/text", gui.KEYBOARD_TYPE_DEFAULT).set_text(tostring(value))
		elseif not (value < max_value) then
			value = max_value - 1
			gooey.input("min_y/text", gui.KEYBOARD_TYPE_DEFAULT).set_text(tostring(value))
		end
		min_y = value
		set_stencil_size()
	elseif input.node_id == hash("max_x/text") then
		local value = tonumber(input.text)
		local min_value = tonumber(gui.get_text(gui.get_node("min_x/text")))
		if not value or value > 165 then
			value = 165
			gooey.input("max_x/text", gui.KEYBOARD_TYPE_DEFAULT).set_text(tostring(value))
		elseif not (value > min_value) then
			value = min_value + 1
			gooey.input("max_x/text", gui.KEYBOARD_TYPE_DEFAULT).set_text(tostring(value))
		end
		max_x = value
		set_stencil_size()
	elseif input.node_id == hash("max_y/text") then
		local value = tonumber(input.text)
		local min_value = tonumber(gui.get_text(gui.get_node("min_y/text")))
		if not value or value > 165 then
			value = 165
			gooey.input("max_y/text", gui.KEYBOARD_TYPE_DEFAULT).set_text(tostring(value))
		elseif not (value > min_value) then
			value = min_value + 1
			gooey.input("max_y/text", gui.KEYBOARD_TYPE_DEFAULT).set_text(tostring(value))
		end
		max_y = value
		set_stencil_size()
	end
end

local function on_checked(checkbox)
	if checkbox.node_id == hash("additive/box") then
		create_additive = checkbox.checked
	elseif checkbox.node_id == hash("subtractive/box") then
		create_subtractive = checkbox.checked
	elseif checkbox.node_id == hash("invert/box") then
		invert = checkbox.checked
	end
end

local function on_pressed(button)
	if button.node_id == hash("load_images/bg") then
		load_images()
	elseif button.node_id == hash("create/bg") then
		if #image_data < 1 then
			gui.set_text(message_box, "No images loaded.")
		elseif not (create_additive or create_subtractive) then
			gui.set_text(message_box, "No volumes created. Select additive or subtractive to generate volumes.")
		else
			volumes = {}
			for group_index, val in ipairs(image_data) do
				divide_picture(group_index)
			end
			if #volumes > 1 then
				gui.set_text(message_box, #volumes.." volumes created.")
			else
				gui.set_text(message_box, "One volume created.")
			end

			local output_string = ""
			for key, val in ipairs(volumes) do
				output_string = output_string..val
				if key < #volumes then
					output_string = output_string..","
				end
			end

			io.output("output/volume_data.txt")
			io.write(walkway..output_string)
			io.output("output/do_not_ship.pw_meta")
			io.write(string_start..walkway..output_string..string_end)
		end
	elseif button.node_id == hash("left/bg") then
		if current_preview > 1 then
			current_preview = current_preview - 1
			set_preview_image()
		end
	elseif button.node_id == hash("right/bg") then
		if current_preview < #image_data then
			current_preview = current_preview + 1
			set_preview_image()
		end
	end
end

function on_input(self, action_id, action)
	dirtylarry.button("load_images", action_id, action, on_pressed, update_button)
	dirtylarry.button("create", action_id, action, on_pressed, update_button)
	dirtylarry.button("left", action_id, action, on_pressed, update_button)
	dirtylarry.button("right", action_id, action, on_pressed, update_button)
	dirtylarry.checkbox("additive", action_id, action, on_checked, update_checkbox)
	dirtylarry.checkbox("subtractive", action_id, action, on_checked, update_checkbox)
	dirtylarry.checkbox("invert", action_id, action, on_checked, update_checkbox)
	local text_config = {max_length = 3, allowed_characters ="[%d]"}
	dirtylarry.input("depth", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, text_config, update_input)
	dirtylarry.input("min_x", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, text_config, update_input)
	dirtylarry.input("max_x", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, text_config, update_input)
	dirtylarry.input("min_y", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, text_config, update_input)
	dirtylarry.input("max_y", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, text_config, update_input)
end