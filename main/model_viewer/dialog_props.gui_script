local MEM = require "modules.memory"
local MOD = require "main.model_viewer.model"
local UI = require "modules.ui"
local G = require "modules.global"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_props"
local DIALOG_DATA

local prop_scroll_list, evaluate_button
local prop_list, prop_list_general = {}, {}
local selected_prop

local function get_button_string(item)
	local str = "Position: "..prop_list[item].position.x.."/"..prop_list[item].position.y.."/"..prop_list[item].position.z
	str = str.." Rotation: "..prop_list[item].rotation.x.."/"..prop_list[item].rotation.y.."/"..prop_list[item].rotation.z
	str = str.." Scale: "..prop_list[item].scale.x.."/"..prop_list[item].scale.y.."/"..prop_list[item].scale.z
	if prop_list[item].signal_z then
		str = str.." Signal Z: "..(prop_list[item].signal_z[1] or "")
	end
	return str
end

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"prop_cancel", "prop_accept"}, DIALOG_NAME)
	local props = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("prop_exclusive/button_white"),
			text_node = gui.get_node("prop_exclusive/text"),
			value_fn = get_button_string,
			template = "prop_exclusive;",
			fn = evaluate_button
		},
		item_count = 0,
		scroll_prefix = "prop_"
	}
	prop_scroll_list = UI.create_list(DIALOG_NAME, gui.get_node("prop_list"), props)
end

function evaluate_button(button, item)
	if button == "prop_cancel" then
		DIALOG.close(DIALOG_NAME)
	elseif button == "prop_accept" or button == "enter" then
		MOD.prop_data = prop_list[selected_prop]
		DIALOG.close(DIALOG_NAME, {prop_changed = true})
	elseif button == prop_scroll_list then
		selected_prop = item
	end
end

local two_pi = 2 * math.pi
local half_pi = math.pi * 0.5
local negative_flip = -0.0001
local positive_flip = two_pi - 0.0001

local function sanitise_euler(euler)
	if euler.x < negative_flip then
		euler.x = euler.x + two_pi
	elseif euler.x > positive_flip then
		euler.x = euler.x - two_pi
	end
	if euler.y < negative_flip then
		euler.y = euler.y + two_pi
	elseif euler.y > positive_flip then
		euler.y = euler.y - two_pi
	end
	if euler.z < negative_flip then
		euler.z = euler.z + two_pi
	elseif euler.z > positive_flip then
		euler.z = euler.z + two_pi
	end
	return euler
end

local function quat_to_euler(q)
	local x = q.x
	local y = q.y
	local z = q.z
	local w = q.w
	local check = 2 * (y * z - w * x)
	if check < 0.999 then
		if check > -0.999 then
			local v = vmath.vector3(-math.asin(check),
			math.atan2(2 * (x * z + w * y), 1 - 2 * (x * x + y * y)),
			math.atan2(2 * (x * y + w * z), 1 - 2 * (x * x + z * z)))
			return v
		else
			local v = vmath.vector3(half_pi, math.atan2(2 * (x * y - w * z), 1 - 2 * (y * y + z * z)), 0)
			return v
		end
	else
		local v = vmath.vector3(-half_pi, math.atan2(-2 * (x * y - w * z), 1 - 2 * (y * y + z * z)), 0)
		return v
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		if not MOD.prop_list_generated then
			prop_list, prop_list_general = {}, {}
			local consumers = {}
			local function get_model_data(model_table)
				if model_table.name == message.model then
					local pos = {}
					local rot = vmath.quat()
					local scale = {}
					local comma_1, comma_2, comma_3, comma_4, comma_5, comma_6
					comma_1 = string.find(model_table.scale, ",")
					comma_2 = string.find(model_table.scale, ",", comma_1 + 1)
					scale.x = tonumber(string.sub(model_table.scale, 1, comma_1 - 1))
					scale.y = tonumber(string.sub(model_table.scale, comma_1 + 1, comma_2 - 1))
					scale.z = tonumber(string.sub(model_table.scale, comma_2 + 1))
					comma_1 = string.find(model_table.point, ",")
					comma_2 = string.find(model_table.point, ",", comma_1 + 1)
					comma_3 = string.find(model_table.point, ",", comma_2 + 1)
					comma_4 = string.find(model_table.point, ",", comma_3 + 1)
					comma_5 = string.find(model_table.point, ",", comma_4 + 1)
					comma_6 = string.find(model_table.point, ",", comma_5 + 1)
					pos.x = tonumber(string.sub(model_table.point, 1, comma_1 - 1))
					pos.y = tonumber(string.sub(model_table.point, comma_1 + 1, comma_2 - 1))
					pos.z = tonumber(string.sub(model_table.point, comma_2 + 1, comma_3 - 1))
					rot.x = tonumber(string.sub(model_table.point, comma_3 + 1, comma_4 - 1))
					rot.y = tonumber(string.sub(model_table.point, comma_4 + 1, comma_5 - 1))
					rot.z = tonumber(string.sub(model_table.point, comma_5 + 1, comma_6 - 1))
					rot.w = tonumber(string.sub(model_table.point, comma_6 + 1))
					scale.x = G.round(scale.x, 2)
					scale.y = G.round(scale.y, 2)
					scale.z = G.round(scale.z, 2)
					pos.x = G.round(pos.x, 2)
					pos.y = G.round(pos.y, 2)
					pos.z = G.round(pos.z, 2)

					local v = quat_to_euler(rot)
					--v.x = -v.x; v.y = -v.y
					local euler = math.deg(sanitise_euler(v))
					rot = {x = euler.x, y = euler.y, z = euler.z}
					rot.x = G.round(rot.x, 1)
					rot.y = G.round(rot.y, 1)
					rot.z = G.round(rot.z, 1)
					table.insert(prop_list, {position = pos, rotation = rot, scale = scale})
					table.insert(prop_list_general, {z = pos.z, name = model_table.name})
				elseif consumers[model_table.name] then
					local comma_1, comma_2, comma_3, comma_4, comma_5, comma_6
					comma_1 = string.find(model_table.point, ",")
					comma_2 = string.find(model_table.point, ",", comma_1 + 1)
					comma_3 = string.find(model_table.point, ",", comma_2 + 1)
					local z = tonumber(string.sub(model_table.point, comma_2 + 1, comma_3 - 1))
					table.insert(prop_list_general, {z = z, name = model_table.name})
				end
			end
			if MOD.active_signals then
				for key, val in ipairs(MEM.art_data.table.propsDictionary) do
					for k, v in ipairs(val.model_data.transform_list) do
						if v.tween and MOD.active_signals[v.tween.signal] then
							consumers[val.key] = consumers[val.key] or {}
							table.insert(consumers[val.key], v.tween.signal)
						end
					end
				end
			end
			for key, val in ipairs(MEM.art_data.table.staticProps or {}) do
				get_model_data(val)
			end
			for key, val in ipairs(MEM.art_data.table.dynamicProps or {}) do
				get_model_data(val)
			end
			for key, val in ipairs(MEM.art_data.table.staticCullingRanges or {}) do
				for k, v in ipairs(val.members) do
					get_model_data(v)
				end
			end
			for key, val in ipairs(MEM.art_data.table.dynamicCullingRanges or {}) do
				for k, v in ipairs(val.members) do
					get_model_data(v)
				end
			end
			table.sort(prop_list, function(a, b) return a.position.z < b.position.z end)

			if #prop_list_general > 0 and next(consumers) then
				table.sort(prop_list_general, function(a, b) return a.z < b.z end)
				local prop_index = 1
				for key, val in ipairs(prop_list_general) do
					if val.name == message.model then
						prop_list[prop_index].signal_z = {}
						for k, v in ipairs(consumers[val.name]) do
							local signal_z = table.remove(MOD.active_signals[v], 1)
							if signal_z then
								prop_list[prop_index].signal_z[k] = G.round(signal_z * 3, 2)
							end
						end
						prop_index = prop_index + 1
						if prop_index > #prop_list then
							break
						end
					else
						for k, v in ipairs(consumers[val.name]) do
							table.remove(MOD.active_signals[v], 1)
						end
					end
				end
			end
			MOD.prop_list_generated = true
		end
		
		UI.update_list(DIALOG_NAME, prop_scroll_list, #prop_list)
		if not selected_prop or selected_prop < 1 or selected_prop > #prop_list then
			UI.select_exclusive_button(DIALOG_NAME, prop_scroll_list, 1, true)
			selected_prop = 1
		else
			UI.select_exclusive_button(DIALOG_NAME, prop_scroll_list, selected_prop, true)
		end
		if message.autoclose then
			if prop_list[1] then
				MOD.prop_data = prop_list[1]
				DIALOG.close(DIALOG_NAME, {prop_changed = true})
			end
		end
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(UI.tab[DIALOG_NAME].scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button)
end