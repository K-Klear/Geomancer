local MEM = require "modules.memory"
local MOD = require "modules.models"
local UI = require "modules.ui"
local G = require "modules.global"

local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_props"
local DIALOG_DATA

local prop_scroll_list, evaluate_button
local selected_prop

local function get_button_string(item)
	local prop_index = MOD.props_for_preview[item][1].target_prop_list_index
	local pos = MEM.art_data.prop_list[prop_index].position
	local rot = G.quat_to_euler(MEM.art_data.prop_list[prop_index].rotation)
	local sc = MEM.art_data.prop_list[prop_index].scale
	local tween_count = #MOD.props_for_preview[item]

	local str = "Position: "..G.round(pos.x, 2).."/"..G.round(pos.y, 2).."/"..G.round(pos.z, 2)
	str = str.." Rotation: "..G.round(rot.x, 2).."/"..G.round(rot.y, 2).."/"..G.round(rot.z, 2)
	str = str.." Scale: "..G.round(sc.x, 2).."/"..G.round(sc.y, 2).."/"..G.round(sc.z, 2)
	str = str.." Tweens: "..tween_count
	return str
end

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"prop_cancel", "prop_accept", "prop_vacuum"}, DIALOG_NAME)
	local props = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("prop_exclusive/button_white"),
			text_node = gui.get_node("prop_exclusive/text"),
			value_fn = get_button_string,
			template = "prop_exclusive;",
			fn = evaluate_button
		},
		item_count = 0,
		scroll_prefix = "prop_"
	}
	prop_scroll_list = UI.create_list(DIALOG_NAME, gui.get_node("prop_list"), props)
end

function evaluate_button(button, item)
	if button == "prop_cancel" then
		DIALOG.close(DIALOG_NAME)
	elseif button == "prop_accept" or button == "enter" then
		DIALOG.close(DIALOG_NAME, {selected_prop = selected_prop})
	elseif button == "prop_vacuum" then
		DIALOG.close(DIALOG_NAME, {vacuum = true})
	elseif button == prop_scroll_list then
		selected_prop = item
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		if #MOD.props_for_preview < 1 then
			gui.set_enabled(gui.get_node("label_no_props"), true)
			UI.update_list(DIALOG_NAME, prop_scroll_list, 0)
			selected_prop = nil
		else
			if (not selected_prop) or selected_prop > #MOD.props_for_preview then
				selected_prop = 1
			end
			gui.set_enabled(gui.get_node("label_no_props"), false)
			UI.update_list(DIALOG_NAME, prop_scroll_list, #MOD.props_for_preview)
			UI.select_exclusive_button(DIALOG_NAME, prop_scroll_list, selected_prop, false, true)
		end
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(UI.tab[DIALOG_NAME].scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button)
end
