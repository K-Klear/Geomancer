local MEM = require "modules.memory"
local UI = require "modules.ui"
local SET = require "modules.settings"
local COL = require "modules.colours"

local parent_tab
local colour_list, selected_colours, evaluate_button
local dialog_open = false

local button_text = " MAIN     FOG    GLOW  ENEMY"

function init(self)
	gui.set_render_order(2)
	msg.post("#", hash("disable"))
	UI.load_template({"colour_cancel"}, "dialog_colours")
	local colours = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("colour_exclusive/button_white"),
			text_node = gui.get_node("colour_exclusive/text"),
			value_fn = function() return button_text end,
			template = "colour_exclusive;",
			fn = evaluate_button
		},
		{
			type = hash("background"),
			node = gui.get_node("main"),
			tint = function(i) return COL.str_to_colour(MEM.art_data.colours[i].main) end
		},
		{
			type = hash("background"),
			node = gui.get_node("fog"),
			tint = function(i) return COL.str_to_colour(MEM.art_data.colours[i].fog) end
		},
		{
			type = hash("background"),
			node = gui.get_node("glow"),
			tint = function(i) return COL.str_to_colour(MEM.art_data.colours[i].glow) end
		},
		{
			type = hash("background"),
			node = gui.get_node("enemy"),
			tint = function(i) return COL.str_to_colour(MEM.art_data.colours[i].enemy) end
		},
		item_count = 0,
		scroll_prefix = "colour_"
	}
	colour_list = UI.create_list("dialog_colours", gui.get_node("colour_list"), colours)
end

function evaluate_button(button, item)
	if button == "colour_cancel" then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		dialog_open = false
		msg.post(parent_tab, hash("dialog_closed"), {dialog = hash("colours")})
	elseif button == colour_list then
		COL.set_current(MEM.art_data.colours[item])
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		parent_tab = sender
		msg.post("#", hash("acquire_input_focus"))
		msg.post("#", hash("enable"))
		dialog_open = true
		UI.update_list("dialog_colours", colour_list, #MEM.art_data.colours)
	elseif message_id == hash("hide") then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		dialog_open = false
		UI.update_list("dialog_colours", colour_list, 0)
	end
end

function update()
	if dialog_open then
		for list_index in pairs(UI.tab.dialog_colours.scrolling) do
			UI.move_list_root("dialog_colours", list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input("dialog_colours", action_id, action, evaluate_button)
end