local MEM = require "modules.memory"
local UI = require "modules.ui"
local COL = require "modules.colours"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_colours"
local DIALOG_DATA

local colour_list, evaluate_button

local button_text = " MAIN     FOG    GLOW  ENEMY"

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"colour_cancel"}, DIALOG_NAME)
	local colours = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("colour_exclusive/button_white"),
			text_node = gui.get_node("colour_exclusive/text"),
			value_fn = function() return button_text end,
			template = "colour_exclusive;",
			fn = evaluate_button
		},
		{
			type = hash("background"),
			node = gui.get_node("main"),
			tint = function(i) return COL.str_to_colour(MEM.art_data.colours[i].main) end
		},
		{
			type = hash("background"),
			node = gui.get_node("fog"),
			tint = function(i) return COL.str_to_colour(MEM.art_data.colours[i].fog) end
		},
		{
			type = hash("background"),
			node = gui.get_node("glow"),
			tint = function(i) return COL.str_to_colour(MEM.art_data.colours[i].glow) end
		},
		{
			type = hash("background"),
			node = gui.get_node("enemy"),
			tint = function(i) return COL.str_to_colour(MEM.art_data.colours[i].enemy) end
		},
		item_count = 0,
		scroll_prefix = "colour_"
	}
	colour_list = UI.create_list(DIALOG_NAME, gui.get_node("colour_list"), colours)
end

function evaluate_button(button, item)
	if button == "colour_cancel" then
		DIALOG.close(DIALOG_NAME)
	elseif button == colour_list then
		COL.set_current(MEM.art_data.colours[item])
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		UI.update_list(DIALOG_NAME, colour_list, #MEM.art_data.colours)
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(UI.tab[DIALOG_NAME].scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button)
end