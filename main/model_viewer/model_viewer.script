local MEM = require "modules.memory"
local SET = require "modules.settings"
local G = require "modules.global"
local MOD = require "main.model_viewer.model"
local COL = require "modules.colours"

local MODEL_CAMERA = "/model_camera"
local CAMERA_TARGET = "/camera_target"
local BASE_TRANSFORM = "/base_transform"
local PROP_OFFSET = "/prop_offset"
local GROUND_GO = "/ground"

go.property("prop_material", resource.material("/render/model.material"))
go.property("glow_material", resource.material("/render/glow.material"))
go.property("no_light_material", resource.material("/render/no_light.material"))
go.property("flash_material", resource.material("/render/flash.material"))
go.property("flash_inv", resource.material("/render/flash_inv.material"))

go.property("prop_inv", resource.material("/render/model_inv.material"))
go.property("glow_inv", resource.material("/render/glow_inv.material"))
go.property("no_light_inv", resource.material("/render/no_light_inv.material"))

go.property("glow_tex", resource.texture("/assets/gfx/white_pixel.png"))
go.property("prop_tex", resource.texture("/assets/gfx/textures/prop.png"))
go.property("cont_1_tex", resource.texture("/assets/gfx/textures/continental_1.png"))
go.property("cont_2_tex", resource.texture("/assets/gfx/textures/continental_2.png"))
go.property("shield_tex", resource.texture("/assets/gfx/textures/shielded.png"))

go.property("grid_tex_dots", resource.texture("/assets/gfx/textures/grid_dots.png"))
go.property("grid_tex", resource.texture("/assets/gfx/textures/grid.png"))
go.property("floor_tex", resource.texture("/assets/gfx/textures/default_floor.png"))

local created_meshes = {}
local created_transforms = {}
local buffer_resources = {}

local show_fog = true

local CAMERA_POSITION = vmath.vector3(0, 0, 0)

local function reset_view()
	MOD.is_dragged = false
	MOD.camera_is_dragged = false
	MOD.target_x = SET.default_camera_rotation
	MOD.target_y = -SET.default_camera_pitch
	MOD.cam_target_x = 0
	MOD.cam_target_y = 0
	MOD.cam_target_z = SET.default_camera_zoom
	CAMERA_POSITION = vmath.vector3(0, 0, 0)
end

local function show_grid(self)
	if SET.model_show_grid == 1 then
		go.set("/grid#grid", "texture0", self.floor_tex)
		go.set("/grid#grid", "tint", COL.get_current("main"))
		msg.post("/grid#grid", hash("enable"))
	elseif SET.model_show_grid == 2 then
		if SET.model_grid_dots then
			go.set("/grid#grid", "texture0", self.grid_tex_dots)
		else
			go.set("/grid#grid", "texture0", self.grid_tex)
		end
		go.set("/grid#grid", "tint", vmath.vector4(1, 1, 1, 1))
		msg.post("/grid#grid", hash("enable"))
	else
		msg.post("/grid#grid", hash("disable"))
	end
end

function init(self)
	msg.post(".", hash("disable"))
	go.set("/model_camera#background", "tint", COL.get_current("fog"))
	msg.post("/model_camera#background", hash("disable"))
	msg.post("/grid#grid", hash("disable"))
	reset_view()
	--show_grid(self)
end

local tex_glow = hash("glow")
local tex_prop = hash("prop")
local tex_shaded = hash("shaded")
local tex_cont_1 = hash("cont_1")
local tex_cont_2 = hash("cont_2")
local tex_ped = hash("ped")
local tex_shield = hash("shield")
local tex_funky = hash("funky")

local flash_timer, flash_old_tex, flash_old_mat, flash_old_tint, flash_on, flash_off, flash_model_url, flash_tint, flash_mat, flash_tex, flash_list
function flash_off()
	if SET.mesh_flash_frequency > 0 then
		go.set(flash_model_url, "tint", flash_old_tint)
		go.set(flash_model_url, "texture0", flash_old_tex)
		go.set(flash_model_url, "material", flash_old_mat)
		if flash_timer then
			timer.cancel(flash_timer)
		end
		flash_timer = timer.delay(SET.mesh_flash_frequency, false, flash_on)
	end
end

function flash_on()
	if flash_timer then
		timer.cancel(flash_timer)
	end
	go.set(flash_model_url, "tint", flash_tint)
	go.set(flash_model_url, "texture0", flash_tex)
	go.set(flash_model_url, "material", flash_mat)
	flash_timer = timer.delay(SET.mesh_flash_time, false, flash_off)
end

local function stop_flashing()
	if flash_timer then
		go.set(flash_model_url, "tint", flash_old_tint)
		go.set(flash_model_url, "texture0", flash_old_tex)
		go.set(flash_model_url, "material", flash_old_mat)
		timer.cancel(flash_timer)
		flash_timer = nil
	end
end

local function stop_flashing_multiple()
	if flash_list then
		for key, val in ipairs(flash_list) do
			go.set(val.url, "tint", val.tint)
			go.set(val.url, "texture0", val.tex)
			go.set(val.url, "material", val.mat)
		end
	end
	flash_list = {}
end

local function flash_multiple(self, part_tab)
	stop_flashing_multiple()
	for key, val in ipairs(part_tab) do
		local model_url = msg.url(nil, created_meshes[val].mesh, "mesh")
		local tint = go.get(model_url, "tint")
		local tex = go.get(model_url, "texture0")
		local mat = go.get(model_url, "material")
		go.set(model_url, "tint", SET.mesh_flash_colour)
		go.set(model_url, "texture0", flash_tex)
		go.set(model_url, "material", flash_mat)
		table.insert(flash_list, {url = model_url, tint = tint, tex = tex, mat = mat})
	end
end

local function flash_part(self, part_index)
	stop_flashing()
	if part_index then
		flash_model_url = msg.url(nil, created_meshes[part_index].mesh, "mesh")
		flash_old_tint = go.get(flash_model_url, "tint")
		flash_old_tex = go.get(flash_model_url, "texture0")
		flash_old_mat = go.get(flash_model_url, "material")
		--local flash_tint = vmath.vector4(1 - old_tint.x, 1 - old_tint.y, 1 - old_tint.z, 1)
		flash_tint = SET.mesh_flash_colour
		if created_meshes[part_index].invert then
			flash_mat = self.flash_inv
		else
			flash_mat = self.flash_material
		end
		flash_tex = self.glow_tex
		go.set(flash_model_url, "tint", flash_tint)
		go.set(flash_model_url, "texture0", flash_tex)
		go.set(flash_model_url, "material", flash_mat)
		flash_on()
	end
end

local function set_material(self, part_index, model_index)
	local model_url = msg.url(nil, created_meshes[part_index].mesh, "mesh")
	local invert = created_meshes[part_index].invert
	if MOD.inverted then
		invert = not invert
	end
	local part_tab = MEM.art_data.table.propsDictionary[model_index].model_data.parts[part_index]
	local mat = part_tab.tab[part_tab.index]
	local mat_list = {[true] = {glow = self.glow_inv, prop = self.prop_inv, nl = self.no_light_inv}, [false] = {glow = self.glow_material, prop = self.prop_material, nl = self.no_light_material}}

	if not COL.materials[mat] then
		flash_old_mat = mat_list[invert].glow
		flash_old_tex = self.glow_tex
	elseif COL.materials[mat].texture == tex_glow then
		flash_old_mat = mat_list[invert].glow
		flash_old_tex = self.glow_tex
	elseif COL.materials[mat].texture == tex_shield then
		flash_old_mat = mat_list[invert].nl
		flash_old_tex = self.shield_tex
	elseif COL.materials[mat].texture == tex_cont_1 then
		flash_old_mat = mat_list[invert].prop
		flash_old_tex = self.cont_1_tex
	elseif COL.materials[mat].texture == tex_cont_2 then
		flash_old_mat = mat_list[invert].prop
		flash_old_tex = self.cont_2_tex
	elseif COL.materials[mat].texture == tex_shaded then
		flash_old_mat = mat_list[invert].prop
		flash_old_tex = self.glow_tex
	else
		flash_old_mat = mat_list[invert].prop
		flash_old_tex = self.prop_tex
	end
	if COL.materials[mat] then
		flash_old_tint = COL.materials[mat].tint()
	else
		flash_old_tint = vmath.vector4(1, 0, 1, 1)
	end
	if not (flash_timer and go.get(flash_model_url, "material") == flash_mat) then
		go.set(model_url, "tint", flash_old_tint)
		go.set(model_url, "texture0", flash_old_tex)
		go.set(model_url, "material", flash_old_mat)
	end
end

local function reset_tween(self)
	go.set(GROUND_GO, "position.z", 0)
	if not MOD.inverted then
		MOD.inverted = false
		for i = 1, #created_meshes do
			set_material(self, i, MOD.model_index)
		end
	end
	for key, val in pairs(MOD.tweenable_transforms) do
		if val.used then
			go.set_position(val.transform_tab.position, val.url)
			go.set(val.url, "scale", val.transform_tab.scale)
			go.set_rotation(val.transform_tab.rotation, val.url)
		end
	end
end

function update(self, dt)
	if MOD.viewer_active then
		local pitch = vmath.quat_rotation_x(math.rad(MOD.target_y))
		local yaw = vmath.quat_rotation_y(math.rad(MOD.target_x))
		local rot = yaw * pitch
		go.set_rotation(rot, MODEL_CAMERA)
		if MOD.pov_lock and MOD.tween_preview then
			go.set_position(vmath.vector3(0, 0, 0), CAMERA_TARGET)
			go.set_position(vmath.vector3(0, 1.75, 0), MODEL_CAMERA)
		else
			if MOD.find_prop then
				MOD.find_prop = false
				CAMERA_POSITION = go.get_world_position(created_meshes[1].mesh)
			else
				local move_vector = vmath.vector3(MOD.cam_target_x, MOD.cam_target_y, 0)
				CAMERA_POSITION = CAMERA_POSITION + vmath.rotate(rot, move_vector)
			end
			go.set_position(CAMERA_POSITION, CAMERA_TARGET)
			local pos = vmath.rotate(rot, vmath.vector3(0, 0, MOD.cam_target_z))
			go.set_position(pos, MODEL_CAMERA)
		end
		MOD.cam_target_x, MOD.cam_target_y = 0, 0
		if MOD.tween_preview then
			local scale = go.get_scale(PROP_OFFSET)
			local inverted = scale.x * scale.y * scale.z * -1 > 0
			if not (inverted == MOD.inverted) then
				MOD.inverted = inverted
				for i = 1, #created_meshes do
					set_material(self, i, MOD.model_index)
				end
			end

			for key, val in pairs(MOD.tweenable_transforms) do
				if val.used then
					val.position = vmath.vector3(val.transform_tab.position)
					val.rotation = vmath.quat(val.transform_tab.rotation)
					val.scale = vmath.vector3(val.transform_tab.scale)
				end
			end
			
			local current_time = MOD.total_time * MOD.scrubber_progress
			for tween_index, v in ipairs(MOD.tween_table) do
				local action_end_time = 0
				for key, val in ipairs(v) do
					action_end_time = action_end_time + val.time
					if current_time >= action_end_time then
						if val.type == "T" then
							MOD.tweenable_transforms[val.part].position = vmath.vector3(val.end_state.x, val.end_state.y, val.end_state.z)
						elseif val.type == "R" then
							MOD.tweenable_transforms[val.part].rotation = G.euler_to_quat(vmath.vector3(val.end_state.x, val.end_state.y, val.end_state.z))
						elseif val.type == "S" then
							MOD.tweenable_transforms[val.part].scale = vmath.vector3(val.end_state.x, val.end_state.y, val.end_state.z)
						end
					else
						local action_start = action_end_time - val.time
						local action_progress = (current_time - action_start) / val.time
						if not (action_progress == action_progress) then
							action_progress = 0		-- this shouldn't be necessary, but keeping it to be safe
						end
						local function get_state()
							local start_state = vmath.vector3(val.start_state.x, val.start_state.y, val.start_state.z)
							local end_state = vmath.vector3(val.end_state.x, val.end_state.y, val.end_state.z)
							return vmath.lerp(action_progress, start_state, end_state)
						end
						if val.type == "T" then
							MOD.tweenable_transforms[val.part].position = get_state()
						elseif val.type == "R" then
							local start_quat = G.euler_to_quat(val.start_state)
							local end_quat = G.euler_to_quat(val.end_state)
							MOD.tweenable_transforms[val.part].rotation = vmath.slerp(action_progress, start_quat, end_quat)
						elseif val.type == "S" then
							MOD.tweenable_transforms[val.part].scale = get_state()
						end
						break
					end
				end
			end

			for key, val in pairs(MOD.tweenable_transforms) do
				if val.used then
					go.set_position(val.position, val.url)
					local sc = vmath.vector3(val.scale.x, val.scale.y, val.scale.z)
					go.set(val.url, "scale", sc)
					go.set_rotation(val.rotation, val.url)
				end
			end
			
			if MOD.move_terrain then
				go.set(GROUND_GO, "position.z", current_time * 3)
			else
				go.set(GROUND_GO, "position.z", 0)
			end
		end
	end
end


local function delete_model()
	stop_flashing_multiple()
	stop_flashing()
	for key, val in ipairs(created_meshes) do
		go.delete(val.mesh)
	end
	for key, val in ipairs(created_transforms) do
		go.delete(val.url)
	end
	created_meshes, created_transforms = {}, {}
end

local function adjust_transform_positions()
	go.set_position(MOD.offset_position, PROP_OFFSET)
	go.set(PROP_OFFSET, "position.z", -MOD.offset_position.z)
	go.set(PROP_OFFSET, "scale", MOD.offset_scale)
	go.set_rotation(MOD.offset_rotation, PROP_OFFSET)
end

local function show_model(self, model_index)
	delete_model()
	local function parse_vertex_data(str)
		local comma_1 = string.find(str, ",")
		local comma_2 = string.find(str, ",", comma_1 + 1)
		local x = string.sub(str, 1, comma_1 - 1)
		local y = string.sub(str, comma_1 + 1, comma_2 - 1)
		local z = string.sub(str, comma_2 + 1)
		return tonumber(x), tonumber(y), tonumber(z)
	end

	local function create_mesh(mesh_tab, parent, part_index, invert)
		local new_mesh = factory.create("#create_mesh")
		msg.post(new_mesh, hash("disable"))
		go.set_parent(new_mesh, parent)
		if not mesh_tab.triangles then
			mesh_tab.triangles = {}
			mesh_tab.normals_parsed = {}
			for i = mesh_tab.IndexStart, mesh_tab.IndexEnd, 3 do
				local function add_triangle(index)
					index = index + 1
					local x, y, z = parse_vertex_data(mesh_tab.verts[index])
					table.insert(mesh_tab.triangles, x); table.insert(mesh_tab.triangles, y); table.insert(mesh_tab.triangles, z)
					x, z, y = parse_vertex_data(mesh_tab.normals[index])
					table.insert(mesh_tab.normals_parsed, x); table.insert(mesh_tab.normals_parsed, y); table.insert(mesh_tab.normals_parsed, z)
				end
				add_triangle(mesh_tab.tris[i])
				add_triangle(mesh_tab.tris[i + 1])
				add_triangle(mesh_tab.tris[i + 2])
			end
			mesh_tab.tris = nil
			mesh_tab.normals = nil
			mesh_tab.verts = nil
		end

		-- create a buffer with a position stream
		local buf = buffer.create(#mesh_tab.triangles / 3, {
			{name = hash("position"), type = buffer.VALUE_TYPE_FLOAT32, count = 3},
			{name = hash("normal"), type = buffer.VALUE_TYPE_FLOAT32, count = 3},
			{name = hash("texcoord0"), type = buffer.VALUE_TYPE_FLOAT32, count = 2}
		})

		-- get the position stream and write the vertices

		local positions = buffer.get_stream(buf, "position")
		local normal = buffer.get_stream(buf, "normal")
		local texcoord0 = buffer.get_stream(buf, "texcoord0")

		local tex_index = 1
		for i, value in ipairs(mesh_tab.triangles) do
			positions[i] = mesh_tab.triangles[i]
			normal[i] = mesh_tab.normals_parsed[i]
			if not (i % 3 == 0) then
				texcoord0[tex_index] = mesh_tab.triangles[i] * 0.25
				tex_index = tex_index + 1
			end
		end

		if not buffer_resources[part_index] then
			local resource_name = "/buffer"..part_index..".bufferc"
			buffer_resources[part_index] = resource.create_buffer(resource_name, {buffer = buf})
		end

		local _url = msg.url(nil, new_mesh, "mesh")
		go.set(_url, "vertices", buffer_resources[part_index])
		local res = go.get(_url, "vertices")
		resource.set_buffer(res, buf)
		table.insert(created_meshes, {mesh = new_mesh, invert = invert})
		set_material(self, part_index, model_index)
	end
	
	MOD.tweenable_transforms = {}
	local invert = false
	local mesh_count = 0
	for key, val in ipairs(MEM.art_data.table.propsDictionary[model_index].model_data.transform_list) do
		local new_transform = factory.create("#create_transform")
		if val.parent_tab then
			go.set_parent(new_transform, val.parent_tab.transform_go)
			go.set_position(val.position, new_transform)
		else
			go.set_parent(new_transform, BASE_TRANSFORM)
		end
		if val.scale.x * val.scale.y * val.scale.z < 0 then
			invert = not invert
		end
		go.set_rotation(val.rotation, new_transform)
		go.set(new_transform, "scale", val.scale)
		val.transform_go = new_transform
		if val.name then
			MOD.tweenable_transforms[val.name] = MOD.tweenable_transforms[val.name] or {
				url = new_transform,
				position = vmath.vector3(val.position),
				rotation = vmath.quat(val.rotation),
				scale = vmath.vector3(val.scale),
				used = false,
				transform_tab = val
			}
		end
		if val.meshes then
			for k, v in ipairs(val.meshes) do
				mesh_count = mesh_count + 1
				create_mesh(v, new_transform, mesh_count, invert)
			end
		end
	end
	adjust_transform_positions()
	for key, val in ipairs(created_meshes) do
		msg.post(val.mesh, hash("enable"))
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") or message_id == hash("tween_preview") then
		msg.post(".", hash("enable"))
		MOD.viewer_active = true
		if not message.model then
			for key, val in ipairs(created_meshes) do
				msg.post(val.mesh, hash("enable"))
			end
			if not MOD.tween_preview then
				flash_part(self, message.selected_part)
			end
		elseif message.model > 0 then
			stop_flashing()
			show_model(self, message.model)
			if created_meshes[message.selected_part] then
				flash_part(self, message.selected_part)
			end
		elseif message.model == 0 then
			delete_model()
		end
		msg.post(".", hash("acquire_input_focus"))
		--msg.post("/grid#grid", hash("enable"))
		show_grid(self)
		msg.post("/model_camera#background", hash("enable"))
	elseif message_id == hash("prepare_tweens") then
		for key, val in pairs(MOD.tweenable_transforms) do
			val.used = false
		end
		for key, val in ipairs(MOD.tween_table) do
			for k, v in ipairs(val) do
				if v.part and MOD.tweenable_transforms[v.part] then
					MOD.tweenable_transforms[v.part].used = true
				end
			end
		end
	elseif message_id == hash("offsets_changed") then
		adjust_transform_positions()
	elseif message_id == hash("update_model") then
		show_model(self, message.model)
		flash_part(self, 1)
	elseif message_id == hash("show_part") then
		flash_part(self, message.selected_part)
	elseif message_id == hash("flash_multiple") then
		flash_multiple(self, MEM.art_data.temp_part_list)
		MEM.art_data.temp_part_list = nil
	elseif message_id == hash("stop_flashing_multiple") then
		stop_flashing_multiple()
	elseif message_id == hash("hide") then
		MOD.viewer_active = false
		MOD.is_dragged = false
		MOD.camera_is_dragged = false
		msg.post(".", hash("release_input_focus"))
		msg.post(".", hash("disable"))
		msg.post("/grid#grid", hash("disable"))
		for key, val in ipairs(created_meshes) do
			msg.post(val.mesh, hash("disable"))
		end
		stop_flashing()
		msg.post("/model_camera#background", hash("disable"))
	elseif message_id == hash("reset_tween") then
		reset_tween(self)
	elseif message_id == hash("remove_model") then
		delete_model()
	elseif message_id == hash("colours_changed") then
		if show_fog then
			go.set("/model_camera#background", "tint", COL.get_current("fog"))
		end
		if SET.model_show_grid == 1 then
			go.set("/grid#grid", "tint", COL.get_current("main"))
		end
	elseif message_id == hash("change_material") then
		if message.part_index then
			set_material(self, message.part_index, message.model_index)
		else
			for key, val in ipairs(created_meshes) do
				set_material(self, key, message.model_index)
			end
		end
	elseif message_id == hash("switch_background") then
		show_fog = not show_fog
		if show_fog then
			go.set("/model_camera#background", "tint", COL.get_current("fog"))
		else
			go.set("/model_camera#background", "tint", vmath.vector4(0))
		end
	elseif message_id == hash("reset_view") then
		reset_view()
	elseif message_id == hash("show_grid") then
		SET.model_show_grid = SET.model_show_grid + 1
		if SET.model_show_grid > 3 then
			SET.model_show_grid = 1
		end
		show_grid(self)
	end
end
