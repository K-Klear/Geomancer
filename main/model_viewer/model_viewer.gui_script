local MEM = require "modules.memory"
local MOD = require "main.model_viewer.model"
local SET = require "modules.settings"
local UI = require "modules.ui"
local COL = require "modules.colours"
local G = require "modules.global"

local bounding_node, bounding_node_preview, aux_node, button_box, playback_box, close_button, timeline, scrubber, time_display

local playback = false

local TAB_NAME = "model_viewer"

local SET_MODEL_VIEWPORT = hash("set_model_viewport")
local GET_MODEL_VIEWPORT = hash("get_model_viewport")

local POSITION_MIN = 10
local POSITION_MAX = 1180
local BUTTON_BOX_POSITION = vmath.vector3(620, 56, 0)
local BUTTON_BOX_POSITION_PREVIEW = vmath.vector3(1024, 128, 0)

local AUX_NODE_POS

local function set_button_colours()
	gui.set_color(gui.get_node("button_colour/main"), COL.get_current("main"))
	gui.set_color(gui.get_node("button_colour/fog"), COL.get_current("fog"))
	gui.set_color(gui.get_node("button_colour/glow"), COL.get_current("glow"))
	gui.set_color(gui.get_node("button_colour/enemy"), COL.get_current("enemy"))
end

function init(self)
	bounding_node = gui.get_node("model_viewer")
	bounding_node_preview = gui.get_node("model_viewer_preview")
	button_box = gui.get_node("button_box")
	playback_box = gui.get_node("playback_box")
	close_button = gui.get_node("close_preview/button_white")
	gui.set_position(button_box, BUTTON_BOX_POSITION)
	timeline = gui.get_node("timeline")
	scrubber = gui.get_node("scrubber")
	time_display = gui.get_node("label_time")
	gui.set_enabled(bounding_node_preview, false)
	gui.set_enabled(timeline, false)
	gui.set_enabled(gui.get_node("playback_box"), false)
	gui.set_enabled(gui.get_node("close_preview/button_white"), false)
	gui.set_enabled(time_display, false)
	local pos = gui.get_position(bounding_node)
	local size = gui.get_size(bounding_node) * gui.get(bounding_node, "scale.x")
	pos.x = pos.x + size.x
	pos.y = pos.y - size.y
	aux_node = gui.new_box_node(pos, vmath.vector3(1))
	AUX_NODE_POS = gui.get_position(aux_node)
	gui.set_pivot(aux_node, gui.PIVOT_NW)
	gui.set_visible(aux_node, false)
	gui.set_render_order(1)
	UI.load_template({"button_colour", "reset_view", "show_grid", "show_background"}, TAB_NAME)
	set_button_colours()
	--msg.post("#", hash("disable"))
end

local function get_viewport()
	local pos_1, pos_2
	if MOD.tween_preview then
		pos_1 = gui.get_screen_position(bounding_node_preview)
	else
		pos_1 = gui.get_screen_position(bounding_node)
	end
	pos_2 = gui.get_screen_position(aux_node)
	local w = pos_2.x - pos_1.x
	local h = pos_1.y - pos_2.y
	local ar = w / h
	camera.set_aspect_ratio("main:/model_camera#camera", ar)
	msg.post("@render:", SET_MODEL_VIEWPORT, {x = pos_1.x, y = pos_2.y, w = w, h = h})
end

local action_bars = {}

local function percent_to_position(percent)
	return (percent * POSITION_MAX) + POSITION_MIN
end

local function create_tween_sections()
	for key, val in ipairs(action_bars) do
		gui.delete_node(val.bar)
		gui.delete_node(val.ending)
	end
	action_bars = {}
	MOD.total_time = 0
	
	for key, val in ipairs(MOD.tween_table) do
		if val.type == "X" then

		else
			local new_bar = gui.clone(gui.get_node("action_bar"))
			local new_bar_end = gui.clone(gui.get_node("action_end"))
			gui.set_enabled(new_bar, true)
			if val.type == "T" then
				gui.set_color(new_bar, SET.colour_tween_move)
			elseif val.type == "R" then
				gui.set_color(new_bar, SET.colour_tween_rotate)
			elseif val.type == "S" then
				gui.set_color(new_bar, SET.colour_tween_scale)
			elseif val.type == "W" then
				gui.set_color(new_bar, SET.colour_tween_wait)
			else
				gui.set_color(new_bar, vmath.vector4(0.5, 0, 0, 1))
			end
			table.insert(action_bars, {bar = new_bar, ending = new_bar_end, time = val.time})
			MOD.total_time = MOD.total_time + val.time
		end
	end
	local time = 0
	for key, val in ipairs(action_bars) do
		local start_pos = percent_to_position(time / MOD.total_time)
		local length = (val.time / MOD.total_time) * POSITION_MAX
		local end_pos = start_pos + length
		gui.set(val.bar, "position.x", start_pos)
		gui.set(val.bar, "size.x", length)
		gui.set(val.ending, "position.x", end_pos)
		time = time + val.time
	end
end

local function stop_playback()
	playback = false
	gui.cancel_animation(scrubber, "position.x")
	gui.play_flipbook(gui.get_node("playback_play/text"), "play")
end

local function start_playback()
	playback = true
	local duration = (1 - MOD.scrubber_progress) * MOD.total_time
	gui.play_flipbook(gui.get_node("playback_play/text"), "pause")
	gui.animate(scrubber, "position.x", POSITION_MAX + POSITION_MIN, gui.EASING_LINEAR, duration, 0, stop_playback)
end

local function close_preview()
	stop_playback()
	MOD.tween_preview = false
	set_button_colours()
	msg.post("#", hash("release_input_focus"))
	gui.set_enabled(bounding_node_preview, false)
	gui.set_enabled(bounding_node, true)
	local pos = gui.get_position(bounding_node)
	local size = gui.get_size(bounding_node) * gui.get(bounding_node, "scale.x")
	pos.x = pos.x + size.x
	pos.y = pos.y - size.y
	gui.set_position(aux_node, AUX_NODE_POS)
	get_viewport()
	UI.unload_template(TAB_NAME)
	UI.load_template({"button_colour", "reset_view", "show_grid", "show_background"}, TAB_NAME)
	gui.set_enabled(gui.get_node("playback_box"), false)
	gui.set_enabled(gui.get_node("timeline"), false)
	gui.set_enabled(gui.get_node("close_preview/button_white"), false)
	gui.set_enabled(time_display, false)
	gui.set_enabled(gui.get_node("label_model"), false)
	gui.set_position(button_box, BUTTON_BOX_POSITION)
	MOD.tween_table = nil
	MOD.model_index = nil
end

local function update_view(update_scubber)
	if update_scubber then
		local min_x = gui.get_screen_position(gui.get_node("min")).x
		local max_x = gui.get_screen_position(gui.get_node("max")).x
		local pos = gui.get_screen_position(scrubber)
		MOD.scrubber_progress = (pos.x - min_x) / (max_x - min_x)
	end
	gui.set_text(time_display, math.floor(MOD.total_time * MOD.scrubber_progress * 1000) / 1000)
end

local function move_scrubber(progress)
	MOD.scrubber_progress = progress
	local pos = POSITION_MAX * MOD.scrubber_progress + POSITION_MIN
	gui.set(scrubber, "position.x", pos)
	update_view()
end

function on_message(self, message_id, message, sender)
	if message_id == GET_MODEL_VIEWPORT then
		get_viewport()
	elseif message_id == hash("show") then
		get_viewport()
		set_button_colours()
		msg.post("#", hash("acquire_input_focus"))
	elseif message_id == hash("hide") and MOD.tween_preview then
		close_preview()
	elseif message_id == hash("disable_input") then
		msg.post("#", hash("release_input_focus"))
	elseif message_id == hash("tween_preview") then
		MOD.total_time = 0
		move_scrubber(0)
		MOD.tween_preview = true
		gui.set_position(button_box, BUTTON_BOX_POSITION_PREVIEW)
		msg.post("#", hash("acquire_input_focus"))
		gui.set_enabled(bounding_node_preview, true)
		gui.set_enabled(bounding_node, false)
		local pos = gui.get_position(bounding_node_preview)
		local size = gui.get_size(bounding_node_preview) * gui.get(bounding_node_preview, "scale.x")
		pos.x = pos.x + size.x
		pos.y = pos.y - size.y
		gui.set_position(aux_node, pos)
		get_viewport()
		UI.load_template({"playback_back", "playback_forward", "playback_play", "playback_stop", "close_preview"}, TAB_NAME)
		gui.set_enabled(gui.get_node("playback_box"), true)
		gui.set_enabled(gui.get_node("timeline"), true)
		gui.set_enabled(gui.get_node("close_preview/button_white"), true)
		gui.set_enabled(time_display, true)
		gui.set_enabled(gui.get_node("label_model"), true)
		gui.set_text(gui.get_node("label_model"), MEM.art_data.model_list[message.model].name)
		MOD.model_index = message.model

		MOD.tween_table = G.expand_repeat_actions(MEM.art_data.model_list[MOD.model_index].tween.script)
		for key = #MOD.tween_table, 1, -1 do
			local val = MOD.tween_table[key]
			if val.time then
				val.time = tonumber(val.time)
			end
			if val.easing then
				local easing_tab = {}
				local x_diff = val.end_state.x - val.start_state.x
				local y_diff = val.end_state.y - val.start_state.y
				local z_diff = val.end_state.z - val.start_state.z
				if val.type == "R" then
					if x_diff > 180 then
						x_diff = x_diff - 360
					elseif x_diff < -180 then
						x_diff = x_diff + 360
					end
					if y_diff > 180 then
						y_diff = y_diff - 360
					elseif y_diff < -180 then
						y_diff = y_diff + 360
					end
					if z_diff > 180 then
						z_diff = z_diff - 360
					elseif z_diff < -180 then
						z_diff = z_diff + 360
					end
				end
				local node_tab = val.easing.nodes
				for i = 1, #node_tab - 1 do
					local s_x = val.start_state.x + (node_tab[i].comp * x_diff)
					local s_y = val.start_state.y + (node_tab[i].comp * y_diff)
					local s_z = val.start_state.z + (node_tab[i].comp * z_diff)
					local e_x = val.start_state.x + (node_tab[i + 1].comp * x_diff)
					local e_y = val.start_state.y + (node_tab[i + 1].comp * y_diff)
					local e_z = val.start_state.z + (node_tab[i + 1].comp * z_diff)
					local t = val.time * (node_tab[i + 1].time - node_tab[i].time)
					table.insert(easing_tab, {time = t, type = val.type, part = val.part, start_state = {x = s_x, y = s_y, z = s_z}, end_state = {x = e_x, y = e_y, z = e_z}})
				end
				table.remove(MOD.tween_table, key)
				for i = #easing_tab, 1, -1 do
					table.insert(MOD.tween_table, key, easing_tab[i])
				end
			end
		end
		create_tween_sections()
	end
end

local function get_current_action()
	local current_time = MOD.total_time * MOD.scrubber_progress
	local duration = 0
	for key, val in ipairs(MOD.tween_table) do
		if val.time > 0.00000001 then
			if duration + val.time > current_time and ((duration + val.time) - current_time) > 0.00000001 then
				return key, duration
			else
				duration = duration + val.time
			end
		end
	end
	return #MOD.tween_table, MOD.total_time
end

local function evaluate_button(button)
	if button == "button_colour" then
		msg.post("/art", hash("open_colour_picker"))
		msg.post("/colours", hash("show"))
		msg.post("#", hash("release_input_focus"))
		MOD.is_dragged = false
		MOD.camera_is_dragged = false
	elseif button == "show_background" then
		msg.post(".", hash("switch_background"))
	elseif button == "reset_view" then
		msg.post(".", hash("reset_view"))
	elseif button == "show_grid" then
		msg.post(".", hash("show_grid"))
	elseif button == "playback_back" then
		local continue_playback = playback
		stop_playback()
		local current_action, start_time = get_current_action()
		local new_time
		if not current_action then
			new_time = MOD.scrubber_progress
		elseif current_action < 2 then
			new_time = 0
		elseif (MOD.total_time * MOD.scrubber_progress) - start_time > 0.00000001 then
			new_time = start_time / MOD.total_time
		else
			for i = 1, current_action - 1 do
				if MOD.tween_table[current_action - i].time > 0 then
					new_time = (start_time - MOD.tween_table[current_action - i].time) / MOD.total_time
					break
				end
			end
			new_time = new_time or 0
		end
		move_scrubber(math.max(new_time, 0))
		if continue_playback then
			start_playback()
		end
	elseif button == "playback_forward" then
		local continue_playback = playback
		stop_playback()
		local current_action, start_time = get_current_action()
		if current_action then
			move_scrubber(math.min((start_time + MOD.tween_table[current_action].time) / MOD.total_time, 1))
		else
			move_scrubber(1)
		end
		if continue_playback then
			start_playback()
		end
	elseif button == "playback_play" then
		if playback then
			stop_playback()
		else
			if not (MOD.scrubber_progress < 1) then
				move_scrubber(0)
			end
			start_playback()
		end
	elseif button == "playback_stop" then
		stop_playback()
		move_scrubber(0)
	elseif button == "close_preview" then
		msg.post("/art#tab_art", hash("tween_preview_closed"), {model_index = MOD.model_index})
		close_preview()
	end
end

function update()
	if playback then
		update_view(true)
	end
end

function on_input(self, action_id, action)
	local current_bounding_node = {[true] = bounding_node_preview, [false] = bounding_node}
	if not action_id then
		if MOD.is_dragged then
			MOD.target_x = MOD.target_x - action.dx * SET.model_rotation_sensitivity
			MOD.target_y = MOD.target_y + action.dy * SET.model_rotation_sensitivity
			MOD.target_y = math.max(-90, math.min(90, MOD.target_y))
		end
		if MOD.camera_is_dragged then
			MOD.cam_target_x = MOD.cam_target_x - action.dx * SET.model_move_sensitivity
			MOD.cam_target_y = MOD.cam_target_y - action.dy * SET.model_move_sensitivity
		end
		if MOD.is_dragged or MOD.camera_is_dragged then
			return
		else
			UI.on_input(TAB_NAME, action_id, action, evaluate_button)
			return
		end
	elseif MOD.tween_preview and action.pressed and action_id == hash("space") then
		if playback then
			stop_playback()
		else
			if not (MOD.scrubber_progress < 1) then
				move_scrubber(0)
			end
			start_playback()
		end
	elseif action.released and MOD.camera_is_dragged and action_id == hash("r_click") then
		MOD.camera_is_dragged = false
		return
	elseif action.released and MOD.is_dragged and action_id == hash("touch") then
		MOD.is_dragged = false
		return
	elseif gui.pick_node(current_bounding_node[MOD.tween_preview], action.x, action.y) then
		if MOD.tween_preview and gui.pick_node(timeline, action.x, action.y) then
			if action_id == hash("touch") then
				stop_playback()
				local pos = gui.get_screen_position(scrubber)
				local min_x = gui.get_screen_position(gui.get_node("min")).x
				local max_x = gui.get_screen_position(gui.get_node("max")).x
				pos.x = math.min(math.max(action.screen_x, min_x), max_x)
				move_scrubber((pos.x - min_x) / (max_x - min_x))
				return
			end
		elseif not (gui.pick_node(button_box, action.x, action.y) or gui.pick_node(playback_box, action.x, action.y) or (gui.pick_node(close_button, action.x, action.y) and MOD.tween_preview)) then
			if action_id == hash("touch") and action.pressed then
				MOD.is_dragged = true
			elseif action_id == hash("r_click") and action.pressed then
				MOD.camera_is_dragged = true
			elseif action_id == hash("scroll_up") and action.value > 0 then
				MOD.cam_target_z = math.max(MOD.cam_target_z - SET.model_zoom_sensitivity, 0.5)
			elseif action_id == hash("scroll_down") and action.value > 0 then
				MOD.cam_target_z = math.min(MOD.cam_target_z + SET.model_zoom_sensitivity, 100)
			end
			return
		else
			UI.on_input(TAB_NAME, action_id, action, evaluate_button)
		end
	end
end