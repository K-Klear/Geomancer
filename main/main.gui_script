local UI = require "modules.ui"
local MEM = require "modules.memory"
local S = require "modules.status"

function init(self)
	gui.set_enabled(gui.get_node("panel_file"), true)

	--[[
	UI.tab.tab_file.panel_node = gui.get_node("panel_file")
	UI.tab.tab_level.panel_node = gui.get_node("panel_level")
	UI.tab.tab_meta.panel_node = gui.get_node("panel_meta")
	UI.tab.tab_beat.panel_node = gui.get_node("panel_beat")
	UI.tab.tab_event.panel_node = gui.get_node("panel_event")
	UI.tab.tab_geo.panel_node = gui.get_node("panel_geo")
	UI.tab.tab_sequence.panel_node = gui.get_node("panel_sequence")
	UI.tab.tab_art.panel_node = gui.get_node("panel_art")
	--]]
	--UI.load_template(UI.tab.tab_file.buttons)
	--[[
	gui.set_enabled(UI.tab.tab_file.panel_node, true)
	gui.set_enabled(UI.tab.tab_level.panel_node, false)
	gui.set_enabled(UI.tab.tab_event.panel_node, false)
	gui.set_enabled(UI.tab.tab_art.panel_node, false)
	gui.set_enabled(UI.tab.tab_geo.panel_node, false)
	gui.set_enabled(UI.tab.tab_meta.panel_node, false)
	gui.set_enabled(UI.tab.tab_sequence.panel_node, false)
	gui.set_enabled(UI.tab.tab_beat.panel_node, false)
	--]]

end

local function evaluate_button(button)
	if UI.tab.tab_level.state == "active" then
		LVL.evaluate_button(button)
		return
	elseif UI.tab.tab_event.state == "active" then
		EVENT.evaluate_button(button)
		return
	elseif UI.tab.tab_geo.state == "active" then
		GEO.evaluate_button(button)
		return
	elseif UI.tab.tab_art.state == "active" then
		ART.evaluate_button(button)
		return
	elseif UI.tab.tab_beat.state == "active" then
		BEAT.evaluate_button(button)
		return
	elseif UI.tab.tab_meta.state == "active" then
		G_S.evaluate_button(button)
	elseif UI.tab.tab_file.state == "active" then

	end
end

local function evaluate_input(field, text)
	if UI.tab.tab_level.state == "active" then
		LVL.evaluate_input(field, text)
	elseif UI.tab.tab_event.state == "active" then
		EVENT.evaluate_input(field, text)
	elseif UI.tab.tab_meta.state == "active" then
		G_S.evaluate_input(field, text)
	elseif UI.tab.tab_art.state == "active" then
		ART.evaluate_input(field, text)
	end
end


function on_input(self, action_id, action)
	UI.on_input(self, action_id, action, evaluate_button, evaluate_input)
end