local UI = require "modules.ui"

local move_mode, enemy_set, obstacle_set, material_set, preview_time, song_length
local filename, overwrite

local full_string

local function set_buttons_enabled(enabled)
	gui.set_enabled(gui.get_node("btn_enemies/button_white"), enabled)
	gui.set_enabled(gui.get_node("btn_obstacles/button_white"), enabled)
	gui.set_enabled(gui.get_node("btn_materials/button_white"), enabled)
	gui.set_enabled(gui.get_node("btn_movement/button_white"), enabled)
	gui.set_enabled(gui.get_node("preview_time/box"), enabled)
end

local function load_buttons(data_loaded)
	UI.load_template({"load_level", "export_level", "level_main_menu", "overwrite_level"})
	if data_loaded then
		UI.load_template({"btn_enemies", "btn_obstacles", "btn_materials", "btn_movement"})
		UI.load_text_field("preview_time", 3)
	end
end

local function load_level(path)
	local f = io.open(path, "rb")
	if f then
		full_string = f:read("*a")
		local tab = json.decode(full_string)
		enemy_set = tab.enemySet
		obstacle_set = tab.obstacleSet
		material_set = tab.materialPropertiesSet
		preview_time = tab.previewTime
		move_mode = tab.moveMode
		song_length = tonumber(tab.songLength)
		update_labels()
		set_buttons_enabled(true)
		load_buttons(true)
		io.close(f)
	end
end

local function export(path)
	local _, start_index = string.find(full_string, "\"previewTime\"")
	local end_index = string.find(full_string, ",", start_index + 1)
	local final_string = string.sub(full_string, 1, start_index + 1)..tostring(preview_time)..string.sub(full_string, end_index)
	local function replace_string(pattern, new_value)
		_, start_index = string.find(final_string, pattern)
		end_index = string.find(final_string, ",", start_index + 2)
		final_string = string.sub(final_string, 1, start_index + 2)..new_value..string.sub(final_string, end_index - 1)
	end
	replace_string("\"obstacleSet\"", obstacle_set)
	replace_string("\"materialPropertiesSet\"", material_set)
	replace_string("\"enemySet\"", enemy_set)
	replace_string("\"moveMode\"", move_mode)

	local file_exists = sys.exists(path..filename)
	local f
	if file_exists and not overwrite then
		f = io.output(path..filename.."_modified")
	else
		f = io.output(path..filename)
	end
	io.write(final_string)
	io.close(f)
end

local function evaluate_input(field, text)
	local value
	local text_node = gui.get_node(field.."/text")
	if field == "preview_time" then
		local value = tonumber(text)
		if value then
			value = math.floor(value)
			if value < 0 then
				value = 0
			elseif value > song_length then
				value = math.floor(song_length)
			end
			preview_time = value
		end
		gui.set_text(gui.get_node("preview_time/text"), preview_time)
	end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("mode_switched") then
		load_buttons(false)
		msg.post("#", hash("enable"))
		gui.set_enabled(gui.get_node("enemy_box"), false)
		gui.set_enabled(gui.get_node("obstacle_box"), false)
		gui.set_enabled(gui.get_node("material_box"), false)
		set_buttons_enabled(false)
		UI.input_enabled = true
	end
end

function on_input(self, action_id, action)
	UI.on_input(self, action_id, action, evaluate_button, evaluate_input)
end