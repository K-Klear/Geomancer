local UI = require("modules/ui")

local move_mode, enemy_set, obstacle_set, material_set, preview_time, song_length
local filename, overwrite

local full_string

local enemy_set_names = {}
enemy_set_names.Normal = "Henchmen"
enemy_set_names.Robots = "Robots"
enemy_set_names.Outlaws = "Bandits"
enemy_set_names.Targets = "Targets"
enemy_set_names.Majesty = "Knights"
enemy_set_names.Skeletons = "Skeletons"

local obstacle_list = {}
obstacle_list.obsNormal = "Normal"
obstacle_list.Pipes = "Pipes"
obstacle_list.Rocks = "Rocks"
obstacle_list.Colony = "Colony"
obstacle_list.Tower = "Tower"
obstacle_list.Crates = "Crates"
obstacle_list.Train = "Train"
obstacle_list.Earthcracker = "Earthcracker"
obstacle_list.ShredPipes = "ShredPipes"
obstacle_list.Vaporwave = "Vaporwave"
obstacle_list.Castle = "Castle"
obstacle_list.Spooky = "Spooky"
obstacle_list.AirDrop = "AirDrop"

local material_list = {}
material_list.default = "Default"
material_list.heartbreaker = "Heartbreaker"
material_list.alien_planet = "Alien Planet"
material_list.arbiter = "Arbiter"
material_list.robot_facilities = "2089 - Robot Facilities"
material_list.strange_creatures = "2089 - Strange Creatures"
material_list.cave = "AP2 Cave"
material_list.desert = "AP2 Desert"
material_list.western = "Western Town"
material_list.oldwest_train = "OldWest Train"
material_list.castle_mat = "Castle"
material_list.shred = "ShredFactory"
material_list.halloween = "HalloweenParty"
material_list.art_deco = "ArtDeco"
material_list.my_mind = "MyMind"

function init(self)
	msg.post("#", hash("disable"))
	for key, val in pairs(obstacle_list) do
		gui.set_text(gui.get_node(key.."/text"), val)
	end
	for key, val in pairs(material_list) do
		gui.set_text(gui.get_node(key.."/text"), val)
	end
end

local function set_buttons_enabled(enabled)
	gui.set_enabled(gui.get_node("btn_enemies/button_white"), enabled)
	gui.set_enabled(gui.get_node("btn_obstacles/button_white"), enabled)
	gui.set_enabled(gui.get_node("btn_materials/button_white"), enabled)
	gui.set_enabled(gui.get_node("btn_movement/button_white"), enabled)
	gui.set_enabled(gui.get_node("preview_time/box"), enabled)
end

local function update_labels()
	gui.set_text(gui.get_node("btn_enemies/text"), enemy_set_names[enemy_set])
	gui.set_text(gui.get_node("btn_obstacles/text"), obstacle_set)
	gui.set_text(gui.get_node("btn_materials/text"), material_set)
	gui.set_text(gui.get_node("btn_movement/text"), move_mode)
	gui.set_text(gui.get_node("preview_time/text"), preview_time)
end

local function load_buttons(data_loaded)
	UI.load_template({"load_level", "export_level", "level_main_menu", "overwrite_level"})
	if data_loaded then
		UI.load_template({"btn_enemies", "btn_obstacles", "btn_materials", "btn_movement"})
		UI.load_text_field("preview_time", 3)
	end
end

local function load_level(path)
	local f = io.open(path, "rb")
	if f then
		full_string = f:read("*a")
		local tab = json.decode(full_string)
		enemy_set = tab.enemySet
		obstacle_set = tab.obstacleSet
		material_set = tab.materialPropertiesSet
		preview_time = tab.previewTime
		move_mode = tab.moveMode
		song_length = tonumber(tab.songLength)
		update_labels()
		set_buttons_enabled(true)
		load_buttons(true)
		io.close(f)
	end
end

local function export(path)
	local _, start_index = string.find(full_string, "\"previewTime\"")
	local end_index = string.find(full_string, ",", start_index + 1)
	local final_string = string.sub(full_string, 1, start_index + 1)..tostring(preview_time)..string.sub(full_string, end_index)
	local function replace_string(pattern, new_value)
		_, start_index = string.find(final_string, pattern)
		end_index = string.find(final_string, ",", start_index + 2)
		final_string = string.sub(final_string, 1, start_index + 2)..new_value..string.sub(final_string, end_index - 1)
	end
	replace_string("\"obstacleSet\"", obstacle_set)
	replace_string("\"materialPropertiesSet\"", material_set)
	replace_string("\"enemySet\"", enemy_set)
	replace_string("\"moveMode\"", move_mode)

	local file_exists = sys.exists(path..filename)
	local f
	if file_exists and not overwrite then
		f = io.output(path..filename.."_modified")
	else
		f = io.output(path..filename)
	end
	io.write(final_string)
	io.close(f)
end

local function evaluate_input(field, text)
	local value
	local text_node = gui.get_node(field.."/text")
	if field == "preview_time" then
		local value = tonumber(text)
		if value then
			value = math.floor(value)
			if value < 0 then
				value = 0
			elseif value > song_length then
				value = math.floor(song_length)
			end
			preview_time = value
		end
		gui.set_text(gui.get_node("preview_time/text"), preview_time)
	end
end


local function evaluate_button(button)
	local checkbox_text = {[true] = "X", [false] = ""}
	if button == "level_main_menu" then
		msg.post(".", hash("disable"))
		UI.unload_template()
		msg.post("#splash", hash("mode_switched"))
	elseif button == "load_level" then
		local num, path = diags.open("pw")
		if path then
			local htap = string.reverse(path)
			filename = string.reverse(string.sub(htap, 1, string.find(htap, "\\")))
			load_level(path)
		end
	elseif button == "btn_enemies" then
		gui.set_enabled(gui.get_node("enemy_box"), true)
		UI.unload_template()
		for key in pairs(enemy_set_names) do
			UI.load_template(key)
		end
	elseif enemy_set_names[button] then
		UI.unload_template()
		load_buttons(true)
		gui.set_enabled(gui.get_node("enemy_box"), false)
		enemy_set = button
		gui.set_text(gui.get_node("btn_enemies/text"), enemy_set_names[enemy_set])
	elseif button == "btn_obstacles" then
		gui.set_enabled(gui.get_node("obstacle_box"), true)
		UI.unload_template()
		for key in pairs(obstacle_list) do
			UI.load_template(key)
		end
	elseif obstacle_list[button] then
		UI.unload_template()
		load_buttons(true)
		gui.set_enabled(gui.get_node("obstacle_box"), false)
		obstacle_set = obstacle_list[button]
		gui.set_text(gui.get_node("btn_obstacles/text"), obstacle_set)
	elseif button == "btn_materials" then
		gui.set_enabled(gui.get_node("material_box"), true)
		UI.unload_template()
		for key in pairs(material_list) do
			UI.load_template(key)
		end
	elseif material_list[button] then
		UI.unload_template()
		load_buttons(true)
		gui.set_enabled(gui.get_node("material_box"), false)
		material_set = material_list[button]
		gui.set_text(gui.get_node("btn_materials/text"), material_set)
	elseif button == "btn_movement" then
		if move_mode == "Moving" then
			move_mode = "Stationary"
		else
			move_mode = "Moving"
		end
		gui.set_text(gui.get_node("btn_movement/text"), move_mode)
	elseif button == "export_level" then
		local num, path = diags.open_folder()
		if path then
			export(path)
		end
	elseif button == "overwrite_level" then
		overwrite = not overwrite
		if overwrite then
			gui.set_text(gui.get_node("overwrite_level/text"), "X")
		else
			gui.set_text(gui.get_node("overwrite_level/text"), "")
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("mode_switched") then
		load_buttons(false)
		msg.post("#", hash("enable"))
		gui.set_enabled(gui.get_node("enemy_box"), false)
		gui.set_enabled(gui.get_node("obstacle_box"), false)
		gui.set_enabled(gui.get_node("material_box"), false)
		set_buttons_enabled(false)
		UI.input_enabled = true
	end
end

function on_input(self, action_id, action)
	UI.on_input(self, action_id, action, evaluate_button, evaluate_input)
end