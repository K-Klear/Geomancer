local MEM = require "modules.memory"
local UI = require "modules.ui"
local G = require "modules.global"
local SET = require "modules.settings"
local COL = require "modules.colours"
local MOD = require "modules.models"
local DIALOG = UI.DIALOG
local TAB_NAME = "tab_art"

local model_list, part_list, evaluate_button, current_material
local material_buttons = {}
local colour_set

local material_list = {
	-- default
	"(DoNotEdit)LiveMat_Props",
	"(DoNotEdit)LiveMat_LevelGeoSimple",
	"(DoNotEdit)LiveMat_Glow",
	"(DoNotEdit)LiveMat_GlowInvert",
	--variants of standard
	"(DoNotEdit)LiveMat_Pedestrians_Dissolve",
	"(DoNotEdit)LiveMat_Continental Interior 1",
	"(DoNotEdit)LiveMat_Continental Interior 2",
	"(DoNotEdit)LiveMat_FrontEnd_Building",
	"(DoNotEdit)LiveMat_LevelGeoComplex",
	"(DoNotEdit)LiveMat_Enemies_Targets",
	--white
	"(DoNotEdit)LiveMat_EnemyGlow",
	"(DoNotEdit)LiveMat_EnemyGlow_Gun",
	"(DoNotEdit)LiveMat_ParticleMesh_EnviroColor",
	"(DoNotEdit)LiveMat_ParticleMesh_Glow",
	--black
	"(DoNotEdit)LiveMat_MegaHitTrail",
	"(DoNotEdit)LiveMat_Gunmat New Three Color",
	--transparent
	"(DoNotEdit)LiveMat_Player_MuzzleFlashSquirtgun",
	"(DoNotEdit)LiveMat_Squirtgun_drops",
	-- combinations
	"(DoNotEdit)LiveMat_Obstacles",
	"(DoNotEdit)LiveMat_MRObstacles",
	"(DoNotEdit)LiveMat_Props_NoDistortion",
	"(DoNotEdit)LiveMat_ParticleMesh_GlowMultiply",
	"(DoNotEdit)LiveMat_Pedestrians",
	"(DoNotEdit)LiveMat_PedestriansAlt",
	-- unique
	"(DoNotEdit)LiveMat_Enemies_Shielded",
	"(DoNotEdit)LiveMat_Beatcubes_mat",
	"(DoNotEdit)LiveMat_Enemies_DeadBody",
	-- chaotic
	"(DoNotEdit)LiveMat_Enemies",
	"(DoNotEdit)LiveMat_Boss",
	"(DoNotEdit)LiveMat_PlayerRingOuter2"
}

local material_label_list = {
	[1] = "Default",
	[5] = "Variants on standard",
	[11] = "White",
	[15] = "Black",
	[17] = "Transparent",
	[19] = "Combinations",
	[25] = "Unique",
	[28] = "Chaotic",
}

local function get_selected_model()
	return UI.tab.tab_art.scrolling_lists[model_list].exclusive_button.selected
end

local function get_selected_part()
	return UI.tab.tab_art.scrolling_lists[part_list].exclusive_button.selected
end

function init(self)
	gui.set_render_order(1)
	msg.post("#", hash("disable"))
	UI.load_template({"sort", "button_replace", "button_rename", "colour_guide", "import_models"}, TAB_NAME)
	local mat_template = gui.get_node("mat_0/button_white")
	local position = gui.get_position(mat_template)
	local start_y = position.y
	local size = gui.get_size(mat_template)
	for key, val in ipairs(material_list) do
		if key == 17 then
			position.x = position.x + size.x
			position.y = start_y
		end
		position.y = position.y - size.y
		if material_label_list[key] then
			local new_label = gui.clone(gui.get_node("mat_label_template"))
			gui.set_text(new_label, material_label_list[key])
			gui.set_position(new_label, position)
			position.y = position.y - size.y
		end
		local new = gui.clone_tree(mat_template)
		gui.set_id(new["mat_0/button_white"], "mat_"..key.."/button_white")
		gui.set_id(new["mat_0/text"], "mat_"..key.."/text")
		gui.set_position(new["mat_0/button_white"], position)
		gui.set_text(new["mat_0/text"], string.sub(material_list[key], 20))
		--gui.set_color(new["mat_0/button_white"], COL.materials[material_list[key]].tint())
		table.insert(material_buttons, new["mat_0/button_white"])
	end
	gui.delete_node(gui.get_node("mat_0/text"))
	gui.delete_node(mat_template)
	gui.delete_node(gui.get_node("mat_label_template"))

	local model_list_tab = {
		{
			type = hash("button"),
			node = gui.get_node("model_dynamic/button_white"),
			text_node = gui.get_node("model_dynamic/text"),
			value_fn = function(i)
				if MEM.art_data.table.propsDictionary[i].dynamic then
					return "Dynamic"
				else
					return "Static"
				end
			end,
			template = "model_dynamic;",
			tint = function(i)
				if (MEM.art_data.table.propsDictionary[i].tween or 0) > 0 then
					return SET.colour_highlight_tween
				elseif MEM.art_data.table.propsDictionary[i].dynamic then
					return SET.colour_highlight_dynamic
				else
					return vmath.vector4(1, 1, 1, 1)
				end
			end,
		},
		{
			type = hash("button"),
			node = gui.get_node("model_tween/button_white"),
			text_node = gui.get_node("model_tween/text"),
			value_fn = function(i)
				if MEM.art_data.table.propsDictionary[i].tween == 1 then
					return "1 tween"
				elseif (MEM.art_data.table.propsDictionary[i].tween or 0) > 1 then
					return MEM.art_data.table.propsDictionary[i].tween.." tweens"
				else
					return "No tween"
				end
			end,
			template = "model_tween;",
			tint = function(i)
				if (MEM.art_data.table.propsDictionary[i].tween or 0) > 0 then
					return SET.colour_highlight_tween
				else
					return vmath.vector4(1, 1, 1, 1)
				end
			end,
		},
		{
			type = hash("exclusive_button"),
			node = gui.get_node("model_exclusive/button_white"),
			text_node = gui.get_node("model_exclusive/text"),
			value_fn = function(i)
				if SET.hide_model_count then
					return MEM.art_data.table.propsDictionary[i].key
				else
					return "("..MEM.art_data.table.propsDictionary[i].model_data.model_count..")"..MEM.art_data.table.propsDictionary[i].key
				end
			end,
			template = "model_exclusive;",
			fn = evaluate_button,
			tint = function(i)
				if (MEM.art_data.table.propsDictionary[i].tween or 0) > 0 then
					return SET.colour_highlight_tween
				elseif MEM.art_data.table.propsDictionary[i].dynamic then
					return SET.colour_highlight_dynamic
				else
					return vmath.vector4(1, 1, 1, 1)
				end
			end,
		},
		item_count = 0,
		scroll_prefix = "model_"
	}
	model_list = UI.create_list(TAB_NAME, gui.get_node("model_list"), model_list_tab)
	local part_list_tab = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("part_exclusive/button_white"),
			text_node = gui.get_node("part_exclusive/text"),
			value_fn = function(i)
				if get_selected_model() > 0 then
					return MEM.art_data.table.propsDictionary[get_selected_model()].model_data.parts[i].name
				end
			end,
			template = "part_exclusive;",
			fn = evaluate_button
		},
		item_count = 0,
		scroll_prefix = "part_"
	}
	part_list = UI.create_list(TAB_NAME, gui.get_node("part_list"), part_list_tab)
end

local function update_materials()
	local selected_model = get_selected_model()
	if selected_model > 0 then
		local selected_part = get_selected_part()
		if selected_part == 0 then
			UI.select_exclusive_button(TAB_NAME, part_list, 1)
			selected_part = 1
		end
		local part_tab = MEM.art_data.table.propsDictionary[selected_model].model_data.parts[selected_part]
		if not part_tab then
			G.update_navbar("Cannot render model "..MEM.art_data.table.propsDictionary[selected_model].key)
			return
		end
		local part_material = part_tab.tab[part_tab.index]
		local material_index
		for key, val in ipairs(material_list) do
			if val == part_material then
				material_index = key
				break
			end
		end
		if current_material and not (current_material == material_index) then
			gui.animate(material_buttons[current_material], "color", vmath.vector4(1, 1, 1, 1), gui.EASING_LINEAR, 0.1)
			--gui.play_flipbook(material_buttons[current_material], "button_exclusive_unpress")
			current_material = nil
		end
		if material_index then
			--gui.play_flipbook(material_buttons[material_index], "button_exclusive_press")
			gui.animate(material_buttons[material_index], "color", SET.colour_highlight_material, gui.EASING_LINEAR, 0.1)
			current_material = material_index
		else
			G.update_navbar("Unknown material on currently seletcted model part")
			current_material = nil
		end
	elseif current_material then
		gui.animate(material_buttons[current_material], "color", vmath.vector4(1, 1, 1, 1), gui.EASING_LINEAR, 0.1)
		--gui.play_flipbook(material_buttons[current_material], "button_exclusive_unpress")
		current_material = nil
	end
end

local function update_lists()
	-- THIS IS PART OF THE UI LEAK, HAPPENED WHEN WORKING ON A TWEEN
	UI.update_list(TAB_NAME, model_list, #MEM.art_data.table.propsDictionary)
	if get_selected_model() > 0 then
		local part_table = MEM.art_data.table.propsDictionary[get_selected_model()].model_data.parts
		UI.update_list(TAB_NAME, part_list, #part_table)
		update_materials()
	end
end

local function open_dialog(dialog, message_tab)
	DIALOG.open(TAB_NAME, dialog, message_tab)
	msg.post("/model_viewer", hash("disable_input"))
end

local function import_models()
	local model_data
	local num, path = diags.open("zip,pw_art", SET.default_path_import_models)
	if path then
		local f = io.open(path, "rb")
		if f then
			if string.sub(path, -3) == "zip" then
				local zip_data = f:read("*a")
				local archive = zip.open(zip_data)
				local file_index = zip.get_number_of_entries(archive) - 1
				for i = 0, file_index do
					local file = zip.extract_by_index(archive, i)
					if string.sub(file.name, -6) == "pw_art" then
						model_data = file.content
						break
					end
				end
			else
				model_data = f:read("*a")
			end
		end
		io.close(f)
	end
	if model_data then
		model_data = MEM.parse_json(model_data)
		if MEM.check(model_data, "pw_art", "Selected pw_art file") then
			model_data = model_data.propsDictionary
			if model_data[1] and model_data[1].object.name == "Placeholder" then
				table.remove(model_data, 1)
			end
			if #model_data < 1 then
				G.update_navbar("No models found.")
			else
				MEM.art_data.models_for_import = model_data
				open_dialog("dialog_import")
			end
		else
			G.update_navbar("Error reading model data.", true)
		end
	else
		G.update_navbar("Error reading model data.", true)
	end
end

local function model_replace(selected_model_index, replace_model_index)
	local old_name = MEM.art_data.table.propsDictionary[selected_model_index].key
	local new_name = MEM.art_data.table.propsDictionary[replace_model_index].key
	for key, val in ipairs(MEM.art_data.table.staticProps) do
		if val.name == new_name then
			val.name = old_name
		end
	end
	for key, val in ipairs(MEM.art_data.table.dynamicProps) do
		if val.name == new_name then
			val.name = old_name
		end
	end
	for key, val in ipairs(MEM.art_data.table.staticCullingRanges) do
		for k, v in ipairs(val.members) do
			if v.name == new_name then
				v.name = old_name
			end
		end
	end
	for key, val in ipairs(MEM.art_data.table.dynamicCullingRanges) do
		for k, v in ipairs(val.members) do
			if v.name == new_name then
				v.name = old_name
			end
		end
	end
	for key, val in ipairs(MEM.art_data.table.propsDictionary[selected_model_index].model_data.parts) do
		local new_model_part_tab = MEM.art_data.table.propsDictionary[replace_model_index].model_data.parts[key]
		if new_model_part_tab and new_model_part_tab.name == val.name then
			new_model_part_tab.tab = val.tab
			new_model_part_tab.index = val.index
		end
	end
	MEM.art_data.table.propsDictionary[replace_model_index].key = MEM.art_data.table.propsDictionary[selected_model_index].key
	MEM.art_data.table.propsDictionary[replace_model_index].object.name = MEM.art_data.table.propsDictionary[selected_model_index].object.name
	MEM.art_data.table.propsDictionary[replace_model_index].dynamic = MEM.art_data.table.propsDictionary[selected_model_index].dynamic
	-- something about tweens too
	
	MEM.art_data.table.propsDictionary[selected_model_index] = MEM.art_data.table.propsDictionary[replace_model_index]
	table.remove(MEM.art_data.table.propsDictionary, replace_model_index)

	G.update_navbar("All instances of "..old_name.." have been replaced by "..new_name.." keeping the original model name and properties.", true)
	update_lists()
	for key, val in ipairs(MEM.art_data.table.propsDictionary) do
		if val.key == old_name then
			msg.post("/model_viewer", hash("update_model"), {model = key})
			timer.delay(0, false, function()
				UI.select_exclusive_button(TAB_NAME, model_list, key)
			end)
			break
		end
	end
end

local function rename_model(new_name, model_to_rename)
	local old_name = MEM.art_data.table.propsDictionary[model_to_rename].key
	MEM.art_data.table.propsDictionary[model_to_rename].key = new_name
	MEM.art_data.table.propsDictionary[model_to_rename].object.name = new_name
	
	for key, val in ipairs(MEM.art_data.table.staticProps or {}) do
		if val.name == old_name then
			val.name = new_name
		end
	end
	for key, val in ipairs(MEM.art_data.table.dynamicProps or {}) do
		if val.name == old_name then
			val.name = new_name
		end
	end
	for key, val in ipairs(MEM.art_data.table.staticCullingRanges or {}) do
		for k, v in ipairs(val.members) do
			if v.name == old_name then
				v.name = new_name
			end
		end
	end
	for key, val in ipairs(MEM.art_data.table.dynamicCullingRanges or {}) do
		for k, v in ipairs(val.members) do
			if v.name == old_name then
				v.name = new_name
			end
		end
	end
	G.update_navbar(old_name.." renamed to "..new_name, true)
end

local function set_model_as_dynamic(key, value)
	local model_tab = MEM.art_data.table.propsDictionary[key]
	if (model_tab.tween or 0) > 0 then
		value = true
	elseif value == nil then
		value = not model_tab.dynamic
	end
	model_tab.dynamic = value
	return value
end

local function sort_models()
	local selected_model_name
	local selected_model = get_selected_model()
	if selected_model > 0 then
		selected_model_name = MEM.art_data.table.propsDictionary[selected_model].key
	end
	table.sort(MEM.art_data.table.propsDictionary, function(a, b) return string.lower(a.key) < string.lower(b.key) end)
	if selected_model_name then
		for key, val in ipairs(MEM.art_data.table.propsDictionary) do
			if val.key == selected_model_name then
				selected_model = key
				UI.update_list(TAB_NAME, model_list)
				UI.select_exclusive_button(TAB_NAME, model_list, selected_model)
			end
		end
	else
		UI.update_list(TAB_NAME, model_list)
	end
	G.update_navbar("Models sorted alphabetically", true)
end

local function delete_model(model) -- breaks maps, do not use without modifying pw_meta as well
	local model_name = MEM.art_data.model_list[model].name
	table.remove(MEM.art_data.model_list, model)
	for key = #MEM.art_data.table_static_props, 1, -1 do
		if MEM.art_data.table_static_props[key].name == model_name then
			table.remove(MEM.art_data.table_static_props[key])
		end
	end
	for key = #MEM.art_data.table_dynamic_props, 1, -1 do
		if MEM.art_data.table_dynamic_props[key].name == model_name then
			table.remove(MEM.art_data.table_dynamic_props[key])
		end
	end
	for key = #MEM.art_data.table_culling_ranges, 1, -1 do
		for k = #MEM.art_data.table_culling_ranges[key].members, 1, -1 do
			if MEM.art_data.table_culling_ranges[key].members[k].name == model_name then
				table.remove(MEM.art_data.table_culling_ranges[key].members, k)
			end
		end
		if #MEM.art_data.table_culling_ranges[key].members < 1 then
			table.remove(MEM.art_data.table_culling_ranges, key)
		end
	end
	for key = #MEM.art_data.table_dynamic_culling_ranges, 1, -1 do
		for k = #MEM.art_data.table_dynamic_culling_ranges[key].members, 1, -1 do
			if MEM.art_data.table_dynamic_culling_ranges[key].members[k].name == model_name then
				table.remove(MEM.art_data.table_dynamic_culling_ranges[key].members, k)
			end
		end
		if #MEM.art_data.table_dynamic_culling_ranges[key].members < 1 then
			table.remove(MEM.art_data.table_dynamic_culling_ranges, key)
		end
	end
	MEM.art_data.mesh_list[model_name] = nil
	update_lists()
	G.update_navbar("All instances of "..model_name.." deleted.", true)
end

local function change_model_material(model_index, part_index, material, change_all)
	if change_all then
		for key, val in ipairs(MEM.art_data.table.propsDictionary[model_index].model_data.parts) do
			val.tab[val.index] = material
			val.tab._pure_array = nil
		end
	else
		local part_tab = MEM.art_data.table.propsDictionary[model_index].model_data.parts[part_index]
		part_tab.tab[part_tab.index] = material
		part_tab.tab._pure_array = nil
	end
end

local function degeomance()
	local tween_count, dynamic_count, material_count = 0, 0, 0
	for key, val in ipairs(MEM.art_data.table.propsDictionary) do
		if val.tween then
			local function remove_tweens(tab)
				for i = #tab.components, 1, -1 do
					if tab.components[i].type == "LevelEventReceiver" or tab.components[i].type == "ScriptedTween" then
						table.remove(tab.components, i)
					end
				end
				if tab.children then
					for k, v in ipairs(tab.children) do
						remove_tweens(v)
					end
				end
			end
			remove_tweens(val.object)
			for k, v in ipairs(val.model_data.transform_list) do
				v.tween = nil
			end
			tween_count = tween_count + val.tween
			val.tween = 0
		end
		if val.dynamic then
			set_model_as_dynamic(key, false)
			dynamic_count = dynamic_count + 1
		end
		local safe_mats = {["(DoNotEdit)LiveMat_Props"] = true, ["(DoNotEdit)LiveMat_LevelGeoSimple"] = true,
		["(DoNotEdit)LiveMat_Glow"] = true, ["(DoNotEdit)LiveMat_GlowInvert"] = true}

		for k, v in ipairs(val.model_data.parts) do
			if not safe_mats[v.tab[v.index]] then
				change_model_material(key, k, "(DoNotEdit)LiveMat_Props")
				material_count = material_count + 1
			end
		end
	end
	local change = false
	if tween_count > 1 then
		G.update_navbar("Removed "..tween_count.." tweens")
		change = true
	elseif tween_count > 0 then
		G.update_navbar("Removed one tween")
		change = true
	end
	if dynamic_count > 1 then
		G.update_navbar(dynamic_count.." models set as static")
		change = true
	elseif dynamic_count > 0 then
		G.update_navbar("One model set as static")
		change = true
	end
	if material_count > 1 then
		G.update_navbar("Changed "..material_count.." materials")
		change = true
	elseif material_count > 0 then
		G.update_navbar("Changed one material")
		change = true
	end
	if not change then
		G.update_navbar("No model changes necessary")
	end
end

local function check_tweens()
	local selected_model = get_selected_model()
	if selected_model then
		local model_tab = MEM.art_data.table.propsDictionary[selected_model]
		if not model_tab then
			UI.update_list(TAB_NAME, model_list, 0)
			return
		end
		local tween_count = 0
		local legal_transforms = {}
		local transform_list = model_tab.model_data.transform_list
		for key, val in ipairs(transform_list) do
			legal_transforms[val.name] = true
		end
		for key, val in ipairs(transform_list) do
			if val.tween then
				tween_count = tween_count + 1
				for k, v in ipairs(val.tween) do
					if v.part then
						if not legal_transforms[v.part] then
							v.part = transform_list[2].name
						end
					end
				end
			end
		end
		model_tab.tween = tween_count
		if tween_count > 0 then
			set_model_as_dynamic(selected_model, true)
		else
			set_model_as_dynamic(selected_model, false)
		end
		UI.update_list(TAB_NAME, model_list, #MEM.art_data.table.propsDictionary) --this is so weird
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("hide") then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		DIALOG.close_all(TAB_NAME)
		msg.post(UI.tab.dialog_tween.path, hash("hide"))
		msg.post("/model_viewer", hash("hide"))
	elseif message_id == hash("show") then
		msg.post("#", hash("enable"))
		msg.post("#", hash("acquire_input_focus"))
		local model_for_viewer
		update_lists()
		if get_selected_model() < 1 and #MEM.art_data.table.propsDictionary > 0 then
			UI.select_exclusive_button(TAB_NAME, model_list, 1, true)
			model_for_viewer = 1
			update_lists()
		end
		msg.post("/model_viewer", hash("show"), {model = model_for_viewer or get_selected_model(), selected_part = get_selected_part()})
		msg.post("/model_viewer", hash("resize_base"))
		if not colour_set then
			colour_set = true
			COL.set_current_to_default()
		end
	elseif message_id == hash("reset") then
		UI.update_list(TAB_NAME, model_list, 0)
		UI.update_list(TAB_NAME, part_list, 0)
		UI.scroll_to_item(TAB_NAME, model_list, 0)
		UI.scroll_to_item(TAB_NAME, part_list, 0)
		colour_set = false
		update_materials()
		msg.post("/model_viewer", hash("remove_model"))
	elseif message_id == hash("check_tweens") then
		check_tweens()
	elseif message_id == hash("dialog_closed") then
		msg.post("#", hash("acquire_input_focus"))
		msg.post("/model_viewer", hash("show"))
		if message.dialog == "dialog_import" then
			if message.import then
				local model_count = 0
				for key, val in ipairs(MEM.art_data.models_for_import) do
					if not MEM.art_data.models_for_import_ignore[val.key] then
						MEM.add_metadata(val)
						val.model_data.model_count = 0
						table.insert(MEM.art_data.table.propsDictionary, val)
						model_count = model_count + 1
					end
				end
				if model_count < 1 then
					G.update_navbar("No models added.", true)
				elseif model_count == 1 then
					G.update_navbar("Imported one model.", true)
					update_lists()
				else
					G.update_navbar("Imported "..model_count.." models.", true)
					update_lists()
				end
			else
				G.update_navbar("No models added.", true)
			end
			MEM.art_data.models_for_import = nil
			MEM.art_data.models_for_import_ignore = nil
		elseif message.dialog == "dialog_replace_model" then
			if message.selected_model then
				model_replace(message.model_to_replace, message.selected_model)
			end
		elseif message.dialog == "dialog_rename_model" then
			if message.new_name then
				rename_model(message.new_name, message.model_to_rename)
				update_lists()
			end
		elseif message.dialog == "dialog_transform" then
			msg.post(".", hash("enable"))
			update_lists()
			check_tweens()
			msg.post("/model_viewer", hash("show"), {model = get_selected_model(), selected_part = get_selected_part()})
		elseif message.dialog == "dialog_confirm" then
			if message.button == 1 then	-- 1 is delete, 3 is cancel
				delete_model(get_selected_model())
			elseif message.button == 3 then
				G.update_navbar("Model deletion canceled", true)
			end
		end
	elseif message_id == hash("degeomance") then
		degeomance()
	end
end

local function count_model_instances(model_name)
	local count = 0
	for key, val in ipairs(MEM.art_data.table.staticProps) do
		if val.name == model_name then
			count = count + 1
		end
	end
	for key, val in ipairs(MEM.art_data.table.dynamicProps) do
		if val.name == model_name then
			count = count + 1
		end
	end
	for key, val in ipairs(MEM.art_data.table.staticCullingRanges) do
		for k, v in ipairs(val.members) do
			if v.name == model_name then
				count = count + 1
			end
		end
	end
	for key, val in ipairs(MEM.art_data.table.dynamicCullingRanges) do
		for k, v in ipairs(val.members) do
			if v.name == model_name then
				count = count + 1
			end
		end
	end
	return count
end

function evaluate_button(button, item)
	if button == "sort" then
		sort_models()
	elseif button == "import_models" then
		import_models()
	elseif button == "colour_guide" then
		sys.open_url("https://mod.io/g/pistol-whip/r/advanced-color-hack-guide")
	elseif button == "button_replace" then
		local selected_model = get_selected_model()
		if selected_model > 0 then
			open_dialog("dialog_replace_model", {model_to_replace = selected_model})
		else
			G.update_navbar("Select a model first", true)
		end
	elseif button == "button_rename" then
		local selected_model = get_selected_model()
		if selected_model > 0 then
			open_dialog("dialog_rename_model", {model_to_rename = selected_model})
		else
			G.update_navbar("Select a model first", true)
		end
	elseif button == "button_delete" then
		local selected_model = get_selected_model()
		if selected_model > 0 then
			local model_name = MEM.art_data.model_list[selected_model].name
			local instance_count = count_model_instances(model_name)
			local dialog_title
			if instance_count < 1 then
				dialog_title = "Delete model "..model_name.."?\nThere are no instances in the map."
			elseif instance_count > 1 then
				dialog_title = "Delete model "..model_name.."?\nThere are "..instance_count.." instances in the map."
			else
				dialog_title = "Delete model "..model_name.."?\nThere is one instance in the map."
			end
			DIALOG.open(TAB_NAME, "dialog_confirm", {title = dialog_title, button_1 = "Delete", button_3 = "Cancel", subject = "delete_model"})
			msg.post("/model_viewer", hash("disable_input"))
		else
			G.update_navbar("Select a model to delete first", true)
		end
	elseif button == "materials" then
		local selected_model = get_selected_model()
		if selected_model > 0 then
			local selected_part = get_selected_part()
			if UI.shift_held then
				change_model_material(selected_model, selected_part, material_list[item], true)
				msg.post("/model_viewer", hash("change_material"), {model_index = selected_model})
			else
				change_model_material(selected_model, selected_part, material_list[item])
				msg.post("/model_viewer", hash("change_material"), {part_index = selected_part, model_index = selected_model})
			end
			update_materials()
		else
			G.update_navbar("Select a model and one of its parts first.", true)
		end
	elseif button == model_list then
		local selected_model = get_selected_model()
		UI.update_list(TAB_NAME, part_list, #MEM.art_data.table.propsDictionary[selected_model].model_data.parts)
		UI.select_exclusive_button(TAB_NAME, part_list, 1)
		if MEM.art_data.table.propsDictionary[item].model_data.do_not_render then
			msg.post("/model_viewer", hash("remove_model")+_G)
			return
		end
		update_materials()
		msg.post("/model_viewer", hash("show"), {model = selected_model, selected_part = 1})
	elseif button == part_list then
		msg.post("/model_viewer", hash("show_part"), {selected_part = item or 1})
		update_materials()
	else
		local div = string.find(button, ";")
		local str = string.sub(button, 1, div)
		if str == "model_dynamic;" then
			set_model_as_dynamic(item)
			UI.update_list(TAB_NAME, model_list)
		elseif str == "model_tween;" then
			if MEM.art_data.table.propsDictionary[item].model_data.do_not_render then
				G.update_navbar("Cannot tween this model", true)
				return
			end
			UI.select_exclusive_button(TAB_NAME, model_list, item, true)
			update_lists()
			msg.post("/model_viewer", hash("show"), {model = item})
			msg.post(".", hash("disable"))
			DIALOG.open(TAB_NAME, "dialog_transform", {model_index = item})
		end
	end
end

function update()
	if UI.current_tab == TAB_NAME then
		for list_index in pairs(UI.tab[TAB_NAME].scrolling) do
			UI.move_list_root(TAB_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("materials_background"), action.x, action.y) then
		for key, val in ipairs(material_buttons) do
			if gui.pick_node(val, action.x, action.y) then
				evaluate_button("materials", key)
				return
			end
		end
	else
		UI.on_input(TAB_NAME, action_id, action, evaluate_button)
	end
end