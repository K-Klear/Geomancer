local MEM = require "modules.memory"
local UI = require "modules.ui"
local SET = require "modules.settings"
local DIALOG = UI.DIALOG
local TAB_NAME = "tab_beat"
local G = require "modules.global"

local obstacle_list, selected_obstacle, selected_enemy, enemy_list, evaluate_button

local obstacle_types = {}
obstacle_types.Normal = {Sidestep = true, LimboTall = true, LimboShort = true}
obstacle_types.Pipes = {Sidestep = true, LimboTall = true, LimboShort = true, Wall = true, TunnelTall = true, TunnelShort = true}
obstacle_types.Rocks = {Sidestep = true, LimboTall = true, LimboShort = true, Wall = true, TunnelTall = true, TunnelShort = true}
obstacle_types.Colony = {Sidestep = true, LimboTall = true, LimboShort = true, Wall = true}
obstacle_types.Tower = {Sidestep = true, LimboTall = true, LimboShort = true}
obstacle_types.Crates = {Sidestep = true, LimboTall = true, LimboShort = true, Wall = true, TunnelTall = true, TunnelShort = true}
obstacle_types.Train = {Sidestep = true, LimboTall = true, LimboShort = true}
obstacle_types.EarthCracker = {LimboTall = true, LimboShort = true}
obstacle_types.ShredPipes = {Sidestep = true, LimboTall = true, LimboShort = true, Wall = true, TunnelTall = true, TunnelShort = true}
obstacle_types.Vaporwave = {Sidestep = true, LimboTall = true, LimboShort = true, Wall = true, TunnelTall = true, TunnelShort = true}
obstacle_types.Castle = {Sidestep = true, LimboTall = true, LimboShort = true, Wall = true}
obstacle_types.Spooky = {Sidestep = true, LimboTall = true, LimboShort = true}
obstacle_types.AirDrop = {Sidestep = true, LimboTall = true, LimboShort = true}
obstacle_types.Logs = {Sidestep = true, LimboTall = true, LimboShort = true, Wall = true, TunnelTall = true, TunnelShort = true}

local enemy_names = {
	normal = "Normal",
	tough = "Tough",
	chuck = "Heavy",
	horse = "Horse Rider",
	shield = "Shielded",
	turret = "Normal Turret",
	minigun = "Minigun Turret",
	skull = "Flying Skull",
	trap = "Glitched Enemy"
}
local internal_names = {
	normal = "Normal",
	tough = "Tough",
	chuck = "ChuckNorris",
	horse = "Mounted Enemy",
	shield = "Shield",
	turret = "Normal Turret",
	minigun = "Minigun Turret",
	skull = "FlyingBomb",
	trap = "Trap Enemy"
}

local internal_to_display = {}
for key, val in pairs(internal_names) do
	internal_to_display[val] = enemy_names[key]
end

local obstacle_names = {Sidestep = "sidestep", LimboTall = "limbo_tall", LimboShort = "limbo_short", Wall = "wall", TunnelShort = "tunnel_short", TunnelTall = "tunnel_tall"}

--local obstacle_positions = {"Right", "FarRight", "EvenMoreRight"}
--obstacle_positions[0] = "Center"
--obstacle_positions[-1] = "Left"
--obstacle_positions[-2] = "FarLeft"
--obstacle_positions[-3] = "EvenMoreLeft"

local function seconds_to_minutes(time)
	return math.floor(time / 60)..":"..math.floor(time % 60)
end

local function get_obstacle_data(obstacle_index)
	local obstacle = MEM.beat_data.obstacle_list[obstacle_index]
	local time = MEM.beat_data.table.beatData[obstacle.beat_data_key].time
	return MEM.beat_data.table.beatData[obstacle.beat_data_key].obstacles[obstacle.obstacles_key], time
end

local function get_enemy_data(enemy_index)
	local enemy = MEM.beat_data.enemy_list[enemy_index]
	local time = MEM.beat_data.table.beatData[enemy.beat_data_key].time
	return MEM.beat_data.table.beatData[enemy.beat_data_key].targets[enemy.enemies_key], time
end

local function update_obstacle(obstacle, time)
	local node = gui.get_node("obstacle_props")
	gui.set_enabled(node, true)
	gui.set_text(node, "Time: "..time.." ("..seconds_to_minutes(time)..")\nType: "..obstacle.type.."\nPosition: "..obstacle.placement)
end

local function update_enemy(enemy_index)
	if not enemy_index then return end
	local enemy_data, time = get_enemy_data(enemy_index)
	gui.set_enabled(gui.get_node("selected_enemy_type/button_white"), true)
	gui.set_enabled(gui.get_node("selected_enemy_sequence/button_white"), true)
	gui.set_enabled(gui.get_node("selected_enemy_label"), true)
	UI.load_template({"selected_enemy_sequence", "selected_enemy_type"}, TAB_NAME)
	gui.set_text(gui.get_node("selected_enemy_label"), "Time: "..time.." ("..seconds_to_minutes(time)..")\nType: "..internal_to_display[enemy_data.enemyType].."\nPosition: "..enemy_data.placement)
	gui.set_text(gui.get_node("selected_enemy_sequence/text"), enemy_data.enemySequence)
	for key, val in pairs(internal_names) do
		if enemy_data.enemyType == val then
			if key == "normal" then
				gui.play_flipbook(gui.get_node("selected_enemy_type/text"), "Henchman")
			else
				gui.play_flipbook(gui.get_node("selected_enemy_type/text"), key)
			end
			break
		end
	end
end

function init(self)
	gui.set_render_order(1)
	msg.post("#", hash("disable"))
	gui.set_enabled(gui.get_node("obstacle_props"), false)
	gui.set_enabled(gui.get_node("selected_enemy_type/button_white"), false)
	gui.set_enabled(gui.get_node("selected_enemy_sequence/button_white"), false)
	gui.set_enabled(gui.get_node("selected_enemy_label"), false)
	local list_tab = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("obstacle_exclusive/button_white"),
			text_node = gui.get_node("obstacle_exclusive/text"),
			value_fn = function(i)
				local obst, time = get_obstacle_data(i)
				return obst.type.." ("..time..")"
			end,
			template = "obstacle_exclusive;",
			fn = evaluate_button
		},
		item_count = 0,
		scroll_prefix = "obstacle_",
		horizontal = true
	}
	obstacle_list = UI.create_list(TAB_NAME, gui.get_node("obstacle_list"), list_tab)
	list_tab = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("enemy_exclusive/button_white"),
			text_node = gui.get_node("enemy_exclusive/text"),
			value_fn = function(i)
				local enemy, time = get_enemy_data(i)
				return internal_to_display[enemy.enemyType].." ("..time..")"
			end,
			template = "enemy_exclusive;",
			fn = evaluate_button
		},
		item_count = 0,
		scroll_prefix = "enemy_",
		horizontal = true
	}
	enemy_list = UI.create_list(TAB_NAME, gui.get_node("enemy_list"), list_tab)
	UI.load_template({"sidestep", "limbo_short", "limbo_tall", "wall", "tunnel_short", "tunnel_tall", "button_replace_bulk", "button_sequence_bulk"}, TAB_NAME)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("hide") then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		DIALOG.close_all(TAB_NAME)
	elseif message_id == hash("show") then
		msg.post("#", hash("enable"))
		msg.post("#", hash("acquire_input_focus"))
		UI.update_list(TAB_NAME, obstacle_list, #MEM.beat_data.obstacle_list)
		UI.update_list(TAB_NAME, enemy_list, #MEM.beat_data.enemy_list)
		if MEM.level_data.obstacleSet then
			for internal, geomancer in pairs(obstacle_names) do
				if not obstacle_types[MEM.level_data.obstacleSet][internal] then
					gui.set_color(gui.get_node(geomancer.."/text"), SET.colour_unsupported_obstacle)
				else
					gui.set_color(gui.get_node(geomancer.."/text"), vmath.vector4(1, 1, 1, 1))
				end
			end
		end
	elseif message_id == hash("reset") then
		selected_obstacle, selected_enemy = nil, nil
		gui.set_enabled(gui.get_node("obstacle_props"), false)
		gui.set_enabled(gui.get_node("selected_enemy_type/button_white"), false)
		gui.set_enabled(gui.get_node("selected_enemy_sequence/button_white"), false)
		gui.set_enabled(gui.get_node("selected_enemy_label"), false)
		UI.unload_template(TAB_NAME, "selected_enemy_type")
		UI.unload_template(TAB_NAME, "selected_enemy_sequence")
		UI.load_template({"sidestep", "limbo_short", "limbo_tall", "wall", "tunnel_short", "tunnel_tall", "button_replace_bulk", "button_sequence_bulk"}, TAB_NAME)
		UI.update_list(TAB_NAME, obstacle_list, 0)
		UI.update_list(TAB_NAME, enemy_list, 0)
	elseif message_id == hash("dialog_closed") then
		if message.dialog == "dialog_replace_enemy" and message.enemy_to_replace then
			G.update_navbar("Replacing "..enemy_names[message.enemy_to_replace].." with "..enemy_names[message.new_type]..".", true)
			local internal_old = internal_names[message.enemy_to_replace]
			local internal_new = internal_names[message.new_type]
			for key, val in ipairs(MEM.beat_data.enemy_list) do
				local enemy_data = MEM.beat_data.table.beatData[val.beat_data_key].targets[val.enemies_key]
				if enemy_data.enemyType == internal_old then
					enemy_data.enemyType = internal_new
				end 
			end
			MEM.beat_data.enemy_types[message.new_type] = true
			MEM.beat_data.enemy_types[message.enemy_to_replace] = false
			UI.update_list(TAB_NAME, enemy_list)
			update_enemy(selected_enemy)
		elseif message.dialog == "dialog_change_sequence" then
			if message.sequence then
				G.update_navbar("Sequence changed to "..message.sequence, true)
				local enemy_data = get_enemy_data(selected_enemy)
				enemy_data.enemySequence = message.sequence
				UI.update_list(TAB_NAME, enemy_list)
				gui.set_text(gui.get_node("selected_enemy_sequence/text"), message.sequence)
			end
		elseif message.dialog == "dialog_bulk_sequence" then
			if message.sequence and message.existing_sequence then
				G.update_navbar("Replacing all instances of "..message.existing_sequence.." with "..message.sequence, true)
				for key, val in ipairs(MEM.beat_data.enemy_list) do
					local enemy_data = MEM.beat_data.table.beatData[val.beat_data_key].targets[val.enemies_key]
					if enemy_data.enemySequence ==  message.existing_sequence then
						enemy_data.enemySequence = message.sequence
					end 
				end
				UI.update_list(TAB_NAME, enemy_list)
				if selected_enemy then
					gui.set_text(gui.get_node("selected_enemy_sequence/text"), get_enemy_data(selected_enemy).enemySequence)
				end
			end
		elseif message.dialog == "dialog_change_enemy_type" then
			if message.new_type then
				G.update_navbar("Enemy type changed to "..enemy_names[message.new_type], true)
				local enemy_data = get_enemy_data(selected_enemy)
				local previous_type_internal = enemy_data.enemyType
				local previous_type
				for key, val in pairs(internal_names) do
					if val == previous_type_internal then
						previous_type = key
						break
					end
				end
				enemy_data.enemyType = internal_names[message.new_type]
				MEM.beat_data.enemy_types[message.new_type] = true
				local type_found
				for key, val in ipairs(MEM.beat_data.enemy_list) do
					if val.type == previous_type_internal then
						type_found = true
						break
					end
				end
				MEM.beat_data.enemy_types[previous_type] = type_found
				UI.update_list(TAB_NAME, enemy_list)
				update_enemy(selected_enemy)
			end
		end
		msg.post("#", hash("acquire_input_focus"))
	end
end

local function set_new_type(obst_type)
	if not selected_obstacle then
		G.update_navbar("Select an obstacle first", true)
		return
	end
	local obst, time = get_obstacle_data(selected_obstacle)
	obst.type = obst_type
	update_obstacle(obst, time)
	if MEM.level_data.obstacleSet then
		if not obstacle_types[MEM.level_data.obstacleSet][obst_type] then
			G.update_navbar("Obstacle type "..obst_type.." may not be compatible with the loaded obstacle set ("..MEM.level_data.obstacleSet..")", true)
		end
	end
	UI.update_list(TAB_NAME, obstacle_list)
end

function evaluate_button(button, item)
	if button == "button_replace_bulk" then
		DIALOG.open(TAB_NAME, "dialog_replace_enemy")
	elseif button == "button_sequence_bulk" then
		DIALOG.open(TAB_NAME, "dialog_bulk_sequence")
	elseif button == "sidestep" then
		set_new_type("Sidestep")
	elseif button == "limbo_tall" then
		set_new_type("LimboTall")
	elseif button == "limbo_short" then
		set_new_type("LimboShort")
	elseif button == "wall" then
		set_new_type("Wall")
	elseif button == "tunnel_tall" then
		set_new_type("TunnelTall")
	elseif button == "tunnel_short" then
		set_new_type("TunnelShort")
	elseif button == "selected_enemy_sequence" then
		DIALOG.open(TAB_NAME, "dialog_change_sequence", {current_sequence = get_enemy_data(selected_enemy).enemySequence})
	elseif button == "selected_enemy_type" then
		local geomancer_type
		local selected_enemy_type = get_enemy_data(selected_enemy).enemyType
		for key, val in pairs(internal_names) do
			if val == selected_enemy_type then
				geomancer_type = key
				break
			end
		end
		if not geomancer_type then
			G.update_navbar("Unknown enemy type.", true)
		end
		DIALOG.open(TAB_NAME, "dialog_change_enemy_type", {current_type = geomancer_type})
	elseif button == obstacle_list then
		selected_obstacle = item
		local obst, time = get_obstacle_data(selected_obstacle)
		update_obstacle(obst, time)
	elseif button == enemy_list then
		selected_enemy = item
		update_enemy(item)
	end
end


function update()
	if UI.current_tab == TAB_NAME then
		for list_index in pairs(UI.tab[TAB_NAME].scrolling) do
			UI.move_list_root(TAB_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(TAB_NAME, action_id, action, evaluate_button)
end