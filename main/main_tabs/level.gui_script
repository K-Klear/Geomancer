local MEM = require "modules.memory"
local UI = require "modules.ui"
local DIALOG = UI.DIALOG
local TAB_NAME = "tab_level"

local enemy_set_names = {}
enemy_set_names.Normal = "Henchmen"
enemy_set_names.Robots = "Robots"
enemy_set_names.Outlaws = "Bandits"
enemy_set_names.Targets = "Targets"
enemy_set_names.Majesty = "Knights"
enemy_set_names.Skeletons = "Skeletons"
enemy_set_names.Fantasy = "Demons"

local desc_node, desc_font
local DESCRIPTION_WIDTH = 517

local function shorten_last_word(line, char_count)
	local shorter
	for i = 1, char_count + 1 do
		shorter = string.sub(line, 1, -i).."..."
		local width = resource.get_text_metrics(desc_font, shorter).width
		if not (width > DESCRIPTION_WIDTH) then
			break
		end
	end
	return shorter
end

local function display_description(text)
	local lines = {"", "", "", ""}
	local current_line = 1
	local cursor = 1
	local newlines = {}

	repeat
		local newline = string.find(text, "\n", cursor)
		table.insert(newlines, newline)
		cursor = (newline or 0) + 1
	until not newline

	repeat
		local space = string.find(text, " ", cursor)
		local new_word
		local force_break = false
		if space then
			if newlines[1] and (space > newlines[1]) then
				space = newlines[1]
				table.remove(newlines, 1)
				force_break = true
			end
			new_word = string.sub(text, cursor, space - 1)
			cursor = space + 1
		else
			new_word = string.sub(text, cursor)
		end
		local new_line = lines[current_line]..new_word
		local width = resource.get_text_metrics(desc_font, new_line).width
		if width > DESCRIPTION_WIDTH then
			if current_line == 4 then
				lines[current_line] = shorten_last_word(new_line, #new_word)
				break
			end
			current_line = current_line + 1
			lines[current_line] = new_word.." "
		else
			lines[current_line] = new_line.." "
		end
		if force_break then
			current_line = current_line + 1
		end
	until (not space) or (current_line > 4)

	local str = ""
	for key, val in ipairs(lines) do
		if key > 4 then break end
		str = str..val.."\n"
	end
	gui.set_text(desc_node, str)
end

function init(self)
	gui.set_render_order(1)
	UI.load_template({"btn_enemies", "btn_obstacles", "btn_materials", "btn_movement"}, TAB_NAME)
	local validation = {
		integer = true,
		min = function() return 0 end,
		max = function() return math.floor(tonumber(MEM.level_data.songLength) or (1/0)) end,
		default = function() return MEM.level_data.previewTime end
	}
	UI.load_text_field("preview_time", 3, TAB_NAME, validation)
	msg.post("#", hash("disable"))
	desc_node = gui.get_node("description")
	desc_font = gui.get_font_resource(gui.get_font(desc_node))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("hide") then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		DIALOG.close_all(TAB_NAME)
	elseif message_id == hash("show") then
		msg.post("#", hash("enable"))
		msg.post("#", hash("acquire_input_focus"))
		gui.set_text(gui.get_node("btn_enemies/text"), enemy_set_names[MEM.level_data.enemySet])
		gui.set_text(gui.get_node("btn_obstacles/text"), MEM.level_data.obstacleSet)
		gui.set_text(gui.get_node("btn_materials/text"), MEM.level_data.materialPropertiesSet)
		gui.set_text(gui.get_node("btn_movement/text"), MEM.level_data.moveMode)
		gui.set_text(gui.get_node("preview_time/text"), MEM.level_data.previewTime)
		gui.set_text(gui.get_node("label_name"), "Map name:\n"..MEM.level_data.sceneDisplayName)
		local clean_desc = string.gsub(MEM.level_data.description, "\\n", "\n")
		clean_desc = string.gsub(clean_desc, "\\u0027", "'")
		display_description(clean_desc)
		if not MEM.beat_data.enemy_list then
			gui.set_text(gui.get_node("label_enemy_count"), "Enemy count:\nUnknown")
		else
			local enemy_count = 0
			local hit_count = 0
			local hits = {
				Normal = 1,
				Tough = 2,
				ChuckNorris = 4,
				["Mounted Enemy"] = 1,
				Shield = 4,
				["Normal Turret"] = 1,
				["Minigun Turret"] = 16,
				FlyingBomb = 1,
				["Trap Enemy"] = 1
			}
			
			for key, val in ipairs(MEM.beat_data.enemy_list) do
				local enemy_data = MEM.beat_data.table.beatData[val.beat_data_key].targets[val.enemies_key]
				enemy_count = enemy_count + 1
				hit_count = hit_count + hits[enemy_data.enemyType]
				if enemy_data.shielded == "True" then
					hit_count = hit_count + 4
				end
			end
			gui.set_text(gui.get_node("label_enemy_count"), "Enemy count:\n"..enemy_count.." ("..hit_count.." hits total)")
		end
	elseif message_id == hash("dialog_closed") then
		if message.dialog == "obstacles" then
			if message.obstacle then
				MEM.level_data.obstacleSet = message.obstacle
				gui.set_text(gui.get_node("btn_obstacles/text"), MEM.level_data.obstacleSet)
			else
				msg.post("#", hash("acquire_input_focus"))
			end
		elseif message.dialog == "material" then
			if message.material then
				MEM.level_data.materialPropertiesSet = message.material
				gui.set_text(gui.get_node("btn_materials/text"), MEM.level_data.materialPropertiesSet)
			else
				msg.post("#", hash("acquire_input_focus"))
			end
		elseif message.dialog == "enemy_set" then
			if message.enemy_set then
				MEM.level_data.enemySet = message.enemy_set
				gui.set_text(gui.get_node("btn_enemies/text"), enemy_set_names[MEM.level_data.enemySet])
			end
			msg.post("#", hash("acquire_input_focus"))
		end
	end
end

local function evaluate_button(button)
	if button == "btn_enemies" then
		DIALOG.open(TAB_NAME, "enemy_set", {enemy_set = MEM.level_data.enemySet})
	elseif button == "btn_obstacles" then
		DIALOG.open(TAB_NAME, "obstacles", {current_set = MEM.level_data.obstacleSet})
	elseif button == "btn_materials" then
		DIALOG.open(TAB_NAME, "material", {current_set = MEM.level_data.materialPropertiesSet})
	elseif button == "btn_movement" then
		if MEM.level_data.moveMode == "Moving" then
			MEM.level_data.moveMode = "Stationary"
		else
			MEM.level_data.moveMode = "Moving"
		end
		gui.set_text(gui.get_node("btn_movement/text"), MEM.level_data.moveMode)
	end
end

local function evaluate_input(field, text)
	if field == "preview_time" then
		MEM.level_data.previewTime = text
		gui.set_text(gui.get_node("preview_time/text"), MEM.level_data.previewTime)
	end
end

function on_input(self, action_id, action)
	UI.on_input(TAB_NAME, action_id, action, evaluate_button, evaluate_input)
end