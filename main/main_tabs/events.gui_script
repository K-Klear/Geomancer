local MEM = require "modules.memory"
local UI = require "modules.ui"
local G = require "modules.global"
local SET = require "modules.settings"
local DIALOG = UI.DIALOG
local TAB_NAME = "tab_event"

local nobeat_list, event_list, tempo_list, events_aux
local previous_signal

local function samples_to_seconds(samples)
	return math.floor((samples / SET.sample_rate) * 1000) * 0.001
end

local function seconds_to_samples(seconds)
	return math.floor(seconds * SET.sample_rate)
end

local function spb_to_BPM(spb)
	return math.floor(((SET.sample_rate * 60) / spb) * 10000) * 0.0001
end

local function BPM_to_spb(BPM)
	return (60 / BPM) * SET.sample_rate
end

local function update_filter_text()
	local event_count = #MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events
	local events_filtered = 0
	local str
	if next(MEM.event_data.filter) then
		for key, val in ipairs(MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events) do
			if MEM.event_data.filter[val.payload] then
				events_filtered = events_filtered + 1
			end
		end
		str = (event_count - events_filtered).." out of "..event_count.."\nevents displayed"
	else
		str = "Displaying all events."
	end
	
	gui.set_text(gui.get_node("label_filter"), str)
end

local function update_event_list(skip_rebuild)
	if not skip_rebuild then
		events_aux = {}
		for key, val in ipairs(MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events) do
			if not MEM.event_data.filter[val.payload] then
				table.insert(events_aux, key)
			end
		end
	end
	UI.update_list(TAB_NAME, event_list, #events_aux)
end

function init(self)
	gui.set_render_order(1)
	msg.post("#", hash("disable"))
	UI.load_template({"sample_48000", "sample_44100", "nobeat_add", "event_add", "event_add_multiple", "tempo_add", "event_filter"}, TAB_NAME)
	local validation = {
		integer = true,
		min = function() return 1 end,
		default = function() return SET.sample_rate end
	}
	UI.load_text_field("sample_rate_field", 5, TAB_NAME, validation)
	UI.load_text_field("sample_offset_field", 8, TAB_NAME, {integer = true, min = function() return 0 end, default = function() return SET.new_event_sample_offset end})
	UI.load_text_field("sample_offset_seconds_field", 8, TAB_NAME, {number = true, min = function() return 0 end, default = function() return samples_to_seconds(SET.new_event_sample_offset) end})
	gui.set_text(gui.get_node("sample_offset_field/text"), SET.new_event_sample_offset)
	gui.set_text(gui.get_node("sample_offset_seconds_field/text"), samples_to_seconds(SET.new_event_sample_offset))
	gui.set_text(gui.get_node("sample_rate_field/text"), SET.sample_rate)
	local function get_nobeat_label(i)
		local start_sample = MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events[i].startSample
		local end_sample = MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events[i].endSample
		return "Seconds: "..samples_to_seconds(start_sample).."-"..samples_to_seconds(end_sample).."\nSample: "..start_sample.."-"..end_sample
	end
	local nobeat_list_tab = {
		{
			type = hash("background"),
			node = gui.get_node("nobeat_panel")
		},
		{
			type = hash("label"),
			node = gui.get_node("nobeat_label"),
			value_fn = get_nobeat_label
		},
		{
			type = hash("button"),
			node = gui.get_node("nobeat_edit/button_white"),
			text_node = gui.get_node("nobeat_edit/text"),
			value_fn = function() return "Edit" end,
			template = "nobeat_edit;"
		},
		{
			type = hash("button"),
			node = gui.get_node("nobeat_remove/button_white"),
			text_node = gui.get_node("nobeat_remove/text"),
			value_fn = function() return "Remove" end,
			template = "nobeat_remove;"
		},
		item_count = 0,
		scroll_prefix = "nobeat_"
	}
	nobeat_list = UI.create_list(TAB_NAME, gui.get_node("nobeat_list"), nobeat_list_tab)
	local function get_event_label(i)
		local index = events_aux[i]
		local start_sample = MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events[index].startSample
		local signal = MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events[index].payload
		return "Seconds: "..samples_to_seconds(start_sample).."\nSample: "..start_sample.."\nSignal: "..signal
	end
	local event_list_tab = {
		{
			type = hash("background"),
			node = gui.get_node("event_panel")
		},
		{
			type = hash("label"),
			node = gui.get_node("event_label"),
			value_fn = get_event_label
		},
		{
			type = hash("button"),
			node = gui.get_node("event_edit/button_white"),
			text_node = gui.get_node("event_edit/text"),
			value_fn = function() return "Edit" end,
			template = "event_edit;"
		},
		{
			type = hash("button"),
			node = gui.get_node("event_remove/button_white"),
			text_node = gui.get_node("event_remove/text"),
			value_fn = function() return "Remove" end,
			template = "event_remove;"
		},
		item_count = 0,
		scroll_prefix = "event_"
	}
	event_list = UI.create_list(TAB_NAME, gui.get_node("event_list"), event_list_tab)
	local function get_tempo_label(i)
		local start_sample = MEM.event_data.table.tempoSections[i].startSample
		local spb = MEM.event_data.table.tempoSections[i].samplesPerBeat
		local signature = MEM.event_data.table.tempoSections[i].beatsPerMeasure
		return "Start sample: "..start_sample.."\nBPM: "..spb_to_BPM(spb).."\nTime signature: "..signature.."/4"
	end
	local tempo_list_tab = {
		{
			type = hash("background"),
			node = gui.get_node("tempo_panel")
		},
		{
			type = hash("label"),
			node = gui.get_node("tempo_label"),
			value_fn = get_tempo_label
		},
		{
			type = hash("button"),
			node = gui.get_node("tempo_edit/button_white"),
			text_node = gui.get_node("tempo_edit/text"),
			value_fn = function() return "Edit" end,
			template = "tempo_edit;"
		},
		{
			type = hash("button"),
			node = gui.get_node("tempo_remove/button_white"),
			text_node = gui.get_node("tempo_remove/text"),
			value_fn = function() return "Remove" end,
			template = "tempo_remove;"
		},
		item_count = 0,
		scroll_prefix = "tempo_"
	}
	tempo_list = UI.create_list(TAB_NAME, gui.get_node("tempo_list"), tempo_list_tab)
end

local function sort_f(a, b)
	return tonumber(a.startSample) < tonumber(b.startSample)
end

local function add_event(start_sample, signal)
	local t = {startSample = start_sample, endSample = start_sample, payload = signal, _key_sort = {"startSample", "endSample", "payload"}}
	table.insert(MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events, t)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("hide") then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		DIALOG.close_all(TAB_NAME)
		UI.update_list(TAB_NAME, nobeat_list, 0)
		UI.update_list(TAB_NAME, event_list, 0)
		UI.update_list(TAB_NAME, tempo_list, 0)
	elseif message_id == hash("show") then
		msg.post("#", hash("enable"))
		msg.post("#", hash("acquire_input_focus"))
		UI.update_list(TAB_NAME, nobeat_list, #MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events)
		update_event_list()
		UI.update_list(TAB_NAME, tempo_list, #MEM.event_data.table.tempoSections)
		update_filter_text()
		if not MEM.event_data.sample_rate_set then
			if SET.autodetect_sample_rate then
				if MEM.beat_data.table then
					local sample_rate_guess
					for key, val in ipairs(MEM.beat_data.table) do
						local guess = math.floor((val.sample / val.time) + 0.5)
						sample_rate_guess = sample_rate_guess or guess
						if not (sample_rate_guess == guess) then
							sample_rate_guess = nil
							break
						end
						if key > 15 then
							break
						end
					end
					if not sample_rate_guess then
						G.update_navbar("Failed to detect sample rate. Using the default value")
						SET.sample_rate = SET.default_sample_rate
					elseif sample_rate_guess == 48000 or sample_rate_guess == 44100 then
						G.update_navbar("Sample rate set to "..sample_rate_guess)
						SET.sample_rate = sample_rate_guess
					else
						G.update_navbar("Sample rate set to "..sample_rate_guess.."\nThis is a non-standard value and might be an error")
						SET.sample_rate = sample_rate_guess
					end
					MEM.event_data.sample_rate_set = true
				else
					G.update_navbar("Beat data not loaded. Using the default sample rate")
					SET.sample_rate = SET.default_sample_rate
				end
			else
				SET.sample_rate = SET.default_sample_rate
			end
			UI.update_list(TAB_NAME, tempo_list)
			gui.set_text(gui.get_node("sample_rate_field/text"), SET.sample_rate)
		end
	elseif message_id == hash("dialog_closed") then
		msg.post("#", hash("acquire_input_focus"))
		if message.dialog == "dialog_nobeat" then
			if message.item then
				local item = message.item
				if message.item == -1 then
					local nobeat_count = #MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events
					table.insert(MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events, {})
					item = nobeat_count + 1
				end
				MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events[item].startSample = message.start_sample
				MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events[item].endSample = message.end_sample
				MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events[item].payload = ""
				MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events[item]._key_sort = {"startSample", "endSample", "payload"}
			end
			table.sort(MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events, sort_f)
			UI.update_list(TAB_NAME, nobeat_list, #MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events)
		elseif message.dialog == "dialog_event" then
			if message.item then
				local item = message.item
				if message.item == -1 then
					local event_count = #MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events
					table.insert(MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events, {})
					item = event_count + 1
				end
				MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events[item].startSample = message.start_sample
				MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events[item].endSample = message.start_sample
				MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events[item].payload = message.signal
				MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events[item]._key_sort = {"startSample", "endSample", "payload"}
				previous_signal = message.signal
			end
			table.sort(MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events, sort_f)
			update_event_list()
			update_filter_text()
		elseif message.dialog == "dialog_event_multiple" then
			if message.start_sample then
				for i = 0, message.repeats - 1 do
					add_event(message.start_sample + (i * message.offset), message.signal)
				end
				table.sort(MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events, sort_f)
				update_event_list()
				update_filter_text()
				G.update_navbar(message.repeats.." events have been created.", true)
			end
		elseif message.dialog == "dialog_tempo" then
			if message.item then
				local item = message.item
				if message.item == -1 then
					local tempo_count = #MEM.event_data.table.tempoSections
					table.insert(MEM.event_data.table.tempoSections, {})
					item = tempo_count + 1
				end
				MEM.event_data.table.tempoSections[item].startSample = message.start_sample
				MEM.event_data.table.tempoSections[item].samplesPerBeat = message.spb
				MEM.event_data.table.tempoSections[item].beatsPerMeasure = message.signature
				MEM.event_data.table.tempoSections[item]._key_sort = {"startSample", "samplesPerBeat", "beatsPerMeasure"}
			end
			table.sort(MEM.event_data.table.tempoSections, sort_f)
			UI.update_list(TAB_NAME, tempo_list, #MEM.event_data.table.tempoSections)
		elseif message.dialog == "dialog_filter" then
			update_event_list()
			update_filter_text()
		end
	elseif message_id == hash("update") then
		MEM.event_data.sample_rate_set = false
	elseif message_id == hash("add_event") then
		add_event(message.start_sample, message.signal)
		table.sort(MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events, sort_f)
		update_event_list()
		update_filter_text()
	end
end

local function evaluate_button(button, item)
	if button == "sample_48000" then
		SET.sample_rate = 48000
		gui.set_text(gui.get_node("sample_rate_field/text"), SET.sample_rate)
		UI.update_list(TAB_NAME, nobeat_list)
		update_event_list(true)
		UI.update_list(TAB_NAME, tempo_list)
	elseif button == "sample_44100" then
		SET.sample_rate = 44100
		gui.set_text(gui.get_node("sample_rate_field/text"), SET.sample_rate)
		UI.update_list(TAB_NAME, nobeat_list)
		update_event_list(true)
		UI.update_list(TAB_NAME, tempo_list)
	elseif button == "nobeat_add" then
		local nobeats = MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events
		local previous_time = 0
		if #nobeats > 0 then
			previous_time = nobeats[#nobeats].endSample
		end
		local t = {startSample = previous_time, endSample = previous_time, payload = "", _key_sort = {"startSample", "endSample", "payload"}}
		if SET.add_opens_edit_box then
			DIALOG.open(TAB_NAME, "dialog_nobeat", {data = t})
		else
			table.insert(MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events, t)
			UI.update_list(TAB_NAME, nobeat_list, #MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events)
		end
	elseif button == "event_add" then
		local events = MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events
		local previous_time = 0
		local signal = "signal"
		if #events > 0 then
			previous_time = events[#events].startSample + SET.new_event_sample_offset
			signal = events[#events].payload
		end
		signal = previous_signal or signal
		if SET.add_opens_edit_box then
			local data = {startSample = previous_time, endSample = previous_time, payload = signal}
			DIALOG.open(TAB_NAME, "dialog_event", {data = data})
		else
			add_event(previous_time, signal)
			update_filter_text()
			update_event_list()
		end
	elseif button == "event_add_multiple" then
		local events = MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events
		local previous_time = 0
		local signal = "signal"
		if #events > 0 then
			previous_time = events[#events].startSample + SET.new_event_sample_offset
			signal = events[#events].payload
		end
		DIALOG.open(TAB_NAME, "dialog_event_multiple", {start = previous_time, signal = signal})
	elseif button == "tempo_add" then
		local tempo = MEM.event_data.table.tempoSections
		local previous_time, previous_spb, previous_signature = 0, 120, 4
		if #tempo > 0 then
			previous_time = tempo[#tempo].startSample
			previous_spb = tempo[#tempo].samplesPerBeat
			previous_signature = tempo[#tempo].beatsPerMeasure
		end
		local t = {startSample = previous_time, samplesPerBeat = previous_spb, beatsPerMeasure = previous_signature}
		if SET.add_opens_edit_box then
			DIALOG.open(TAB_NAME, "dialog_tempo", {data = t})
		else
			table.insert(MEM.event_data.table.tempoSections, t)
			UI.update_list(TAB_NAME, tempo_list, #MEM.event_data.table.tempoSections)
		end
	elseif button == "event_filter" then
		DIALOG.open(TAB_NAME, "dialog_filter", {event_track = MEM.event_data.event_track_index})
	else
		local div = string.find(button, ";")
		local str = string.sub(button, 1, div)
		if str == "nobeat_remove;" then
			table.remove(MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events, item)
			UI.update_list(TAB_NAME, nobeat_list, #MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events)
		elseif str == "nobeat_edit;" then
			DIALOG.open(TAB_NAME, "dialog_nobeat", {item = item, data = MEM.event_data.table.eventsData[MEM.event_data.nobeat_track_index].events[item]})
		elseif str == "event_remove;" then
			table.remove(MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events, events_aux[item])
			update_event_list()
			update_filter_text()
		elseif str == "event_edit;" then
			DIALOG.open(TAB_NAME, "dialog_event", {item = events_aux[item], data = MEM.event_data.table.eventsData[MEM.event_data.event_track_index].events[events_aux[item]]})
		elseif str == "tempo_remove;" then
			if #MEM.event_data.table.tempoSections > 1 then
				table.remove(MEM.event_data.table.tempoSections, item)
				UI.update_list(TAB_NAME, tempo_list, #MEM.event_data.table.tempoSections)
			else
				G.update_navbar("There must always be at least one tempo section!", true)
			end
		elseif str == "tempo_edit;" then
			DIALOG.open(TAB_NAME, "dialog_tempo", {item = item, data = MEM.event_data.table.tempoSections[item]})
		end
	end
end

local function evaluate_input(field, text)
	if field == "sample_rate_field" then
		SET.sample_rate = text
		UI.update_list(TAB_NAME, nobeat_list)
		update_event_list(true)
		UI.update_list(TAB_NAME, tempo_list)
	elseif field == "sample_offset_field" then
		SET.new_event_sample_offset = text
		gui.set_text(gui.get_node("sample_offset_seconds_field/text"), samples_to_seconds(SET.new_event_sample_offset))
	elseif field == "sample_offset_seconds_field" then
		SET.new_event_sample_offset = seconds_to_samples(text)
		gui.set_text(gui.get_node("sample_offset_field/text"), SET.new_event_sample_offset)
	end
end

function update()
	if UI.current_tab == TAB_NAME then
		for list_index in pairs(UI.tab[TAB_NAME].scrolling) do
			UI.move_list_root(TAB_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(TAB_NAME, action_id, action, evaluate_button, evaluate_input)
end