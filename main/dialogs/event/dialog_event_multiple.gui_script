local MEM = require "modules.memory"
local UI = require "modules.ui"
local SET = require "modules.settings"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_event_multiple"
local DIALOG_DATA

local start_sample, max_sample, signal, offset, repeats, default_signal

local function samples_to_seconds(samples)
	return math.floor((samples / SET.sample_rate) * 1000) * 0.001
end

local function seconds_to_samples(seconds)
	return math.floor(seconds * SET.sample_rate)
end

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"dialog_event_cancel", "dialog_event_accept"}, DIALOG_NAME)
	local validation_sample = {
		integer = true,
		min = function() return 0 end,
		max = function() return max_sample end,
		default = function() return 0 end
	}
	local validation_seconds = {
		number = true,
		min = function() return 0 end,
		max = function() return samples_to_seconds(max_sample) end,
		default = function() return 0 end
	}
	local validation_signal = {
		text = true,
		json_safe = true,
		not_empty = true,
		default = function() return default_signal end
	}
	local validation_repeat = {
		integer = true,
		min = function() return 1 end,
		default = function() return 2 end
	}
	UI.load_text_field("event_start_sample", 10, DIALOG_NAME, validation_sample)
	UI.load_text_field("event_start_seconds", 10, DIALOG_NAME, validation_seconds)
	UI.load_text_field("event_offset_sample", 10, DIALOG_NAME, validation_sample)


	UI.load_text_field("event_offset_seconds", 10, DIALOG_NAME, validation_seconds)

	UI.load_text_field("event_signal", 15, DIALOG_NAME, validation_signal)

	UI.load_text_field("event_repeat", 3, DIALOG_NAME, validation_repeat)
end

local function evaluate_button(button)
	if button == "dialog_event_accept" then
		DIALOG.close(DIALOG_NAME, {start_sample = start_sample, signal = signal, offset = offset, repeats = repeats})
	elseif button == "dialog_event_cancel" or button == "escape" then
		DIALOG.close(DIALOG_NAME)
	end
end

local function recalculate_values()
	if start_sample > max_sample then
		start_sample = max_sample
	end
	gui.set_text(gui.get_node("event_start_sample/text"), start_sample)
	gui.set_text(gui.get_node("event_start_seconds/text"), samples_to_seconds(start_sample))
	gui.set_text(gui.get_node("event_offset_sample/text"), offset)
	gui.set_text(gui.get_node("event_offset_seconds/text"), samples_to_seconds(offset))
end

local function evaluate_input(field, text)
	if field == "event_start_sample" then
		start_sample = text
	elseif field == "event_start_seconds" then
		start_sample = seconds_to_samples(text)
	elseif field == "event_signal" then
		signal = text
	elseif field == "event_offset_sample" then
		offset = text
	elseif field == "event_offset_seconds" then
		offset = seconds_to_samples(text)
	elseif field == "event_repeat" then
		repeats = text
	end
	recalculate_values()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		start_sample = message.start
		signal = message.signal
		default_signal = signal
		offset = 0
		repeats = 2
		if MEM.level_data.songLength then
			max_sample = tonumber(MEM.level_data.songLength) * SET.sample_rate
		else
			max_sample = 1/0
		end
		gui.set_text(gui.get_node("event_repeat/text"), repeats)
		gui.set_text(gui.get_node("event_signal/text"), signal)
		recalculate_values()
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button, evaluate_input)
end