local MEM = require "modules.memory"
local UI = require "modules.ui"
local SET = require "modules.settings"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_nobeat"
local DIALOG_DATA

local start_sample, end_sample, max_sample, item_index

local function samples_to_seconds(samples)
	return math.floor((samples / SET.sample_rate) * 1000) * 0.001
end

local function seconds_to_samples(seconds)
	return math.floor(seconds * SET.sample_rate)
end

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"dialog_nobeat_cancel", "dialog_nobeat_accept"}, DIALOG_NAME)
	local validation = {
		integer = true,
		min = function() return 0 end,
		max = function() return max_sample end,
		default = function() return 0 end
	}
	UI.load_text_field("nobeat_start_sample", 10, DIALOG_NAME, validation)
	UI.load_text_field("nobeat_end_sample", 10, DIALOG_NAME, validation)
	UI.load_text_field("nobeat_duration_sample", 10, DIALOG_NAME, validation)
	validation = {
		number = true,
		min = function() return 0 end,
		max = function() return samples_to_seconds(max_sample) end,
		default = function() return 0 end
	}
	UI.load_text_field("nobeat_start_seconds", 10, DIALOG_NAME, validation)
	UI.load_text_field("nobeat_end_seconds", 10, DIALOG_NAME, validation)
	UI.load_text_field("nobeat_duration_seconds", 10, DIALOG_NAME, validation)
end

local function evaluate_button(button)
	if button == "dialog_nobeat_accept" then
		DIALOG.close(DIALOG_NAME, {start_sample = start_sample, end_sample = end_sample, item = item_index})
	elseif button == "dialog_nobeat_cancel" then
		DIALOG.close(DIALOG_NAME)
	end
end

local function recalculate_values()
	if start_sample > end_sample then
		end_sample = start_sample
	end
	if end_sample > max_sample then
		end_sample = max_sample
	end
	gui.set_text(gui.get_node("nobeat_start_sample/text"), start_sample)
	gui.set_text(gui.get_node("nobeat_end_sample/text"), end_sample)
	gui.set_text(gui.get_node("nobeat_duration_sample/text"), end_sample - start_sample)
	gui.set_text(gui.get_node("nobeat_start_seconds/text"), samples_to_seconds(start_sample))
	gui.set_text(gui.get_node("nobeat_end_seconds/text"), samples_to_seconds(end_sample))
	gui.set_text(gui.get_node("nobeat_duration_seconds/text"), samples_to_seconds(end_sample - start_sample))
end

local function evaluate_input(field, text)
	if field == "nobeat_start_sample" then
		start_sample = text
	elseif field == "nobeat_end_sample" then
		end_sample = text
	elseif field == "nobeat_duration_sample" then
		end_sample = start_sample + text
	elseif field == "nobeat_start_seconds" then
		start_sample = seconds_to_samples(text)
	elseif field == "nobeat_end_seconds" then
		end_sample = seconds_to_samples(text)
	elseif field == "nobeat_duration_seconds" then
		end_sample = start_sample + seconds_to_samples(text)
	end
	recalculate_values()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		start_sample = tonumber(message.data.startSample)
		end_sample = tonumber(message.data.endSample)
		item_index = message.item or -1
		if MEM.level_data.song_length then
			max_sample = MEM.level_data.song_length * SET.sample_rate
		else
			max_sample = 1/0
		end
		recalculate_values()
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button, evaluate_input)
end