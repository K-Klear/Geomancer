local MEM = require "modules.memory"
local UI = require "modules.ui"
local SET = require "modules.settings"
local G = require "modules.global"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_parent_transform"
local DIALOG_DATA

local transform_parent_list, selected_transform, transform_index, evaluate_button, transform_list

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"dialog_parent_accept", "dialog_parent_cancel"}, DIALOG_NAME)
	local parent_list = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("transform_parent_exclusive/button_white"),
			text_node = gui.get_node("transform_parent_exclusive/text"),
			value_fn = function(i)
				local str = ""
				local space = ""
				for i = 1, transform_list[i].level - 1 do
					str = str.."_"
					space = " "
				end
				return str..space..transform_list[i].name
			end,
			template = "transform_parent_exclusive;",
			fn = evaluate_button,
			tint = function(i)
				if i == transform_index then
					return SET.colour_selected_transform_parent
				else
					return vmath.vector4(1, 1, 1, 1)
				end
			end,
		},
		item_count = 0,
		scroll_prefix = "transform_parent_"
	}
	transform_parent_list = UI.create_list(DIALOG_NAME, gui.get_node("transform_parent_list"), parent_list)
end

function evaluate_button(button, item)
	if button == "dialog_parent_accept" or button == "enter" then
		if not selected_transform then
			G.update_navbar("You must select a transform first", true)
		elseif selected_transform == transform_index then
			G.update_navbar("Cannot parent a transform to itself", true)
		else
			DIALOG.close(DIALOG_NAME, {new_parent = selected_transform})
		end
	elseif button == "dialog_parent_cancel" or button == "escape" then
		DIALOG.close(DIALOG_NAME)
	elseif button == transform_parent_list then
		if item == transform_index then
			G.update_navbar("Select a different transform", true)
		end
		selected_transform = item
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		transform_list = MEM.art_data.table.propsDictionary[message.model_index].model_data.transform_list
		transform_index = message.transform_index
		local text = "Choose a new parent for transform\n"..transform_list[transform_index].name
		gui.set_text(gui.get_node("title_parent"), text)
		selected_transform = nil
		UI.update_list(DIALOG_NAME, transform_parent_list, #transform_list)
		UI.select_exclusive_button(DIALOG_NAME, transform_parent_list, 0, true)
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(DIALOG_DATA.scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button)
end