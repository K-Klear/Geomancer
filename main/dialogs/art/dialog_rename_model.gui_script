local UI = require "modules.ui"
local MEM = require "modules.memory"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_rename_model"
local DIALOG_DATA

local model_name, model_to_rename

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"dialog_rename_model_cancel", "dialog_rename_model_accept"}, DIALOG_NAME)
	local validation = {
		text = true,
		json_safe = true,
		not_empty = true,
		default = function() return model_name end
	}
	UI.load_text_field("field_rename_model", 31, DIALOG_NAME, validation)
end

local function evaluate_button(button)
	if button == "dialog_rename_model_accept" then
		if model_name == MEM.art_data.model_list[model_to_rename].name then
			msg.post("/navbar#navbar", hash("update_status"), {text = "Enter a different name.", clear = true})
			return
		else
			for key, val in ipairs(MEM.art_data.model_list) do
				if val.name == model_name then
					msg.post("/navbar#navbar", hash("update_status"), {text = "Model with that name already exists.", clear = true})
					return
				end
			end
			DIALOG.close(DIALOG_NAME, {new_name = model_name, model_to_rename = model_to_rename})
		end
	elseif button == "dialog_rename_model_cancel" or button == "escape" then
		DIALOG.close(DIALOG_NAME)
	end
end

local function evaluate_input(field, text)
	if field == "field_rename_model" then
		model_name = text
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		model_to_rename = message.model_to_rename
		model_name = message.model_name
		gui.set_text(gui.get_node("field_rename_model/text"), model_name)
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button, evaluate_input)
end