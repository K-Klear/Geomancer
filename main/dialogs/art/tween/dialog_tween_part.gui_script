local UI = require "modules.ui"
local MEM = require "modules.memory"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_tween_part"
local DIALOG_DATA

local evaluate_button, selected_part, model_index, action_index, list
local part_list = {}

function init(self)
	gui.set_render_order(3)
	msg.post("#", hash("disable"))
	UI.load_template({"tween_part_accept", "tween_part_cancel"}, "dialog_tween_part")
	local part_list_tab = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("tween_part_exclusive/button_white"),
			text_node = gui.get_node("tween_part_exclusive/text"),
			value_fn = function(i) return part_list[i] end,
			template = "tween_part_exclusive;",
			fn = evaluate_button
		},
		item_count = 0,
		scroll_prefix = "tween_part_"
	}
	list = UI.create_list("dialog_tween_part", gui.get_node("tween_part_list"), part_list_tab)
end

function evaluate_button(button, item)
	if button == "tween_part_accept" then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		msg.post(parent_tab, hash("dialog_closed"), {
			dialog = hash("dialog_tween_part"), selected_part = selected_part - 1, model_index = model_index, action_index = action_index
		})
		part_list = {}
		dialog_active = false
		selected_part, model_index = nil, nil
		UI.update_list("dialog_tween_part", list, 0)
	elseif button == "tween_part_cancel" then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		msg.post(parent_tab, hash("dialog_closed"), {dialog = hash("dialog_tween_part")})
		part_list = {}
		dialog_active = false
		selected_part, model_index = nil, nil
		UI.update_list("dialog_tween_part", list, 0)
	elseif button == list then
		selected_part = item
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		dialog_active = true
		parent_tab = sender
		msg.post("#", hash("acquire_input_focus"))
		msg.post("#", hash("enable"))
		selected_part = message.part_index + 1
		model_index = message.model
		action_index = message.action_index
		table.insert(part_list, "[whole prop]")
		for key, val in ipairs(MEM.art_data.part_names[message.model_name]) do
			table.insert(part_list, val)
		end
		UI.update_list("dialog_tween_part", list, #part_list)
		UI.select_exclusive_button("dialog_tween_part", list, 1, true)
	elseif message_id == hash("hide") then
		dialog_active = false
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		part_list = {}
		selected_part, model_index = nil, nil
		UI.update_list("dialog_tween_part", list, 0)
	end
end

function update()
	if dialog_active then
		for list_index in pairs(UI.tab.dialog_tween_part.scrolling) do
			UI.move_list_root("dialog_tween_part", list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input("dialog_tween_part", action_id, action, evaluate_button)
end