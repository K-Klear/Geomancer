local UI = require "modules.ui"
local MEM = require "modules.memory"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_tween_part"
local DIALOG_DATA

local evaluate_button, selected_part, model_index, action_index, list
local part_list = {}

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"tween_part_accept", "tween_part_cancel"}, DIALOG_NAME)
	local part_list_tab = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("tween_part_exclusive/button_white"),
			text_node = gui.get_node("tween_part_exclusive/text"),
			value_fn = function(i) return part_list[i] end,
			template = "tween_part_exclusive;",
			fn = evaluate_button
		},
		item_count = 0,
		scroll_prefix = "tween_part_"
	}
	list = UI.create_list(DIALOG_NAME, gui.get_node("tween_part_list"), part_list_tab)
end

function evaluate_button(button, item)
	if button == "tween_part_accept" then
		DIALOG.close(DIALOG_NAME, {
			dialog = hash(DIALOG_NAME), selected_part = selected_part - 1, model_index = model_index, action_index = action_index
		})
		part_list = {}
		selected_part, model_index = nil, nil
		UI.update_list(DIALOG_NAME, list, 0)
	elseif button == "tween_part_cancel" or button == "escape" then
		DIALOG.close(DIALOG_NAME)
		part_list = {}
		selected_part, model_index = nil, nil
		UI.update_list(DIALOG_NAME, list, 0)
	elseif button == list then
		selected_part = item
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		selected_part = message.part_index + 1
		model_index = message.model
		action_index = message.action_index
		table.insert(part_list, "[whole prop]")
		for key, val in ipairs(MEM.art_data.part_names[message.model_name]) do
			table.insert(part_list, val)
		end
		UI.update_list(DIALOG_NAME, list, #part_list)
		UI.select_exclusive_button(DIALOG_NAME, list, selected_part, true)
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(DIALOG_DATA.scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button)
end