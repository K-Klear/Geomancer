local UI = require "modules.ui"
local MEM = require "modules.memory"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_tween_copy"
local DIALOG_DATA

local evaluate_button, selected_model, list
local model_list = {}

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"tween_copy_accept", "tween_copy_cancel"}, DIALOG_NAME)
	local model_list_tab = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("copy_tween_exclusive/button_white"),
			text_node = gui.get_node("copy_tween_exclusive/text"),
			value_fn = function(i) return model_list[i].name.."/"..model_list[i].transform end,
			template = "copy_tween_exclusive;",
			fn = evaluate_button
		},
		item_count = 0,
		scroll_prefix = "copy_tween_"
	}
	list = UI.create_list(DIALOG_NAME, gui.get_node("copy_tween_list"), model_list_tab)
end

function evaluate_button(button, item)
	if button == "tween_copy_accept" then
		DIALOG.close(DIALOG_NAME, {selected_model = model_list[selected_model].key, transform_index = model_list[selected_model].transform_index})
		model_list = {}
		selected_model = nil
		UI.update_list(DIALOG_NAME, list, 0)
	elseif button == "tween_copy_cancel" or button == "escape" then
		DIALOG.close(DIALOG_NAME)
		model_list = {}
		selected_model = nil
		UI.update_list(DIALOG_NAME, list, 0)
	elseif button == list then
		selected_model = item
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		model_list = {}
		for key, val in ipairs(MEM.art_data.table.propsDictionary[message.model].model_data.transform_list) do
			if val.tween and not (message.selected_transform == key) then
				table.insert(model_list, {
					name = MEM.art_data.table.propsDictionary[message.model].key,
					transform = val.name or "[no name]",
					key = message.model,
					transform_index = key
				})
			end
		end
		for key, val in ipairs(MEM.art_data.table.propsDictionary) do
			for k, v in ipairs(val.model_data.transform_list) do
				if v.tween and not (key == message.model) then
					table.insert(model_list, {
						name = val.key,
						transform = v.name or "[no name]",
						key = key,
						transform_index = k
					})
				end
			end
		end
		gui.set_enabled(gui.get_node("dialog_tween_copy_warning"), #model_list < 1)
		UI.update_list(DIALOG_NAME, list, #model_list)
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(DIALOG_DATA.scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button)
end