local UI = require "modules.ui"
local MEM = require "modules.memory"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_tween_copy"
local DIALOG_DATA

local evaluate_button, selected_model, list
local model_list = {}

function init(self)
	gui.set_render_order(3)
	msg.post("#", hash("disable"))
	UI.load_template({"tween_copy_accept", "tween_copy_cancel"}, "dialog_tween_copy")
	local model_list_tab = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("copy_tween_exclusive/button_white"),
			text_node = gui.get_node("copy_tween_exclusive/text"),
			value_fn = function(i) return model_list[i].name end,
			template = "copy_tween_exclusive;",
			fn = evaluate_button
		},
		item_count = 0,
		scroll_prefix = "copy_tween_"
	}
	list = UI.create_list("dialog_tween_copy", gui.get_node("copy_tween_list"), model_list_tab)
end

function evaluate_button(button, item)
	if button == "tween_copy_accept" then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		msg.post(parent_tab, hash("dialog_closed"), {dialog = hash("dialog_tween_copy"), selected_model = selected_model})
		model_list = {}
		dialog_active = false
		selected_model = nil
		UI.update_list("dialog_tween_copy", list, 0)
	elseif button == "tween_copy_cancel" then
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		msg.post(parent_tab, hash("dialog_closed"), {dialog = hash("dialog_tween_copy")})
		model_list = {}
		dialog_active = false
		selected_model = nil
		UI.update_list("dialog_tween_copy", list, 0)
	elseif button == list then
		selected_model = model_list[item].key
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		dialog_active = true
		parent_tab = sender
		msg.post("#", hash("acquire_input_focus"))
		msg.post("#", hash("enable"))
		for key, val in ipairs(MEM.art_data.model_list) do
			if val.tween and not (key == message.model) then
				table.insert(model_list, {name = val.name, key = key})
			end
		end
		gui.set_enabled(gui.get_node("dialog_tween_copy_warning"), #model_list < 1)
		UI.update_list("dialog_tween_copy", list, #model_list)
	elseif message_id == hash("hide") then
		dialog_active = false
		msg.post("#", hash("disable"))
		msg.post("#", hash("release_input_focus"))
		model_list = {}
		selected_model = nil
		UI.update_list("dialog_tween_copy", list, 0)
	end
end

function update()
	if dialog_active then
		for list_index in pairs(UI.tab.dialog_tween_copy.scrolling) do
			UI.move_list_root("dialog_tween_copy", list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input("dialog_tween_copy", action_id, action, evaluate_button)
end