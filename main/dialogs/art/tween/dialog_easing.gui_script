local UI = require "modules.ui"
local MEM = require "modules.memory"
local SET = require "modules.settings"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_easing"
local DIALOG_DATA

local evaluate_button, evaluate_input, action_tab, action_index
local vertices = {}
local lines = {}
local vertex_temp, line_temp
local vertex_count = 6
local current_easing = "outsine"
local vertex_dragged = false
local current_vertex
local graph_node, aux_node

local function delete_graph()
	for key, val in ipairs(vertices) do
		gui.delete_node(val.node)
	end
	for key, val in ipairs(lines) do
		gui.delete_node(val)
	end
	vertices, lines = {}, {}
	current_vertex = nil
end

local HALF_PI = math.pi * 0.5
local TWO_THIRDS_PI = (2 * math.pi) / 3
local FOUR_NINTHS_PI = (2 * math.pi) / 4.5
local GRAPH_SIZE_X, GRAPH_SIZE_Y = 400, 400
local CONST_1 = 1.70158
local CONST_2 = CONST_1 * 1.525
local CONST_3 = CONST_1 + 1
local CONST_N = 7.5625
local CONST_D = 2.75

local easing_fn = {}
function easing_fn.outsine(x) return math.sin(x * HALF_PI) end
function easing_fn.insine(x) return 1 - math.cos(x * HALF_PI) end
function easing_fn.inoutsine(x) return - (math.cos(math.pi * x) - 1) / 2 end
function easing_fn.linear(x) return x end
function easing_fn.incubic(x) return x * x * x end
function easing_fn.outcubic(x) return 1 - (1 - x)^3 end
function easing_fn.inoutcubic(x)
	if x < 0.5 then
		return 4 * x * x * x
	else
		return 1 - (-2 * x + 2)^3 / 2
	end
end
function easing_fn.inquint(x) return x^5 end
function easing_fn.outquint(x) return 1 - (1 - x)^5 end
function easing_fn.inoutquint(x)
	if x < 0.5 then
		return 16 * x^5
	else
		return 1 - (-2 * x + 2)^5 / 2
	end
end
function easing_fn.incirc(x) return 1 - math.sqrt(1 - x^2) end
function easing_fn.outcirc(x) return math.sqrt(1 - (x-1)^2) end
function easing_fn.inoutcirc(x)
	if x < 0.5 then
		return (1 - math.sqrt(1 - (2 * x)^2)) / 2
	else
		return (math.sqrt(1 - (-2 * x + 2)^2) + 1) / 2
	end
end
function easing_fn.inelastic(x)
	if x > 0 and x < 1 then
		return -2^(10 * x - 10) * math.sin((x * 10 - 10.75) * TWO_THIRDS_PI)
	else
		return x
	end
end
function easing_fn.outelastic(x)
	if x > 0 and x < 1 then
		return 2^(-10 * x) * math.sin((x * 10 - 0.75) * TWO_THIRDS_PI) + 1
	else
		return x
	end
end
function easing_fn.inoutelastic(x)
	if x > 0 and x < 1 then
		if x < 0.5 then
			return -(2^(20 * x - 10) * math.sin((20 * x - 11.125) * FOUR_NINTHS_PI)) / 2
		else
			return (2^(-20 * x + 10) * math.sin((20 * x - 11.125) * FOUR_NINTHS_PI)) / 2 + 1
		end
	else
		return x
	end
end
function easing_fn.inquad(x) return x * x end
function easing_fn.outquad(x) return 1 - (1 - x)^2 end
function easing_fn.inoutquad(x)
	if x < 0.5 then
		return 2 * x * x
	else
		return 1 - (-2 * x + 2)^2 / 2
	end
end
function easing_fn.inquart(x) return x^4 end
function easing_fn.outquart(x) return 1 - (1 - x)^4 end
function easing_fn.inoutquart(x)
	if x < 0.5 then
		return 8 * x^4
	else
		return 1 - (-2 * x + 2)^4 / 2
	end
end
function easing_fn.inexpo(x)
	if x > 0 then
		return 2^(10 * x - 10)
	else
		return 0
	end
end
function easing_fn.outexpo(x)
	if x < 1 then
		return 1 - 2^(-10 * x)
	else
		return 1
	end
end
function easing_fn.inoutexpo(x)
	if x > 0 and x < 1 then
		if x < 0.5 then
			return 2^(20 * x - 10) / 2
		else
			return (2 - 2^(-20 * x + 10)) / 2
		end
	else
		return x
	end
end
function easing_fn.inback(x) return CONST_3 * x^3 - CONST_1 * x * x end
function easing_fn.outback(x) return 1 + CONST_3 * (x - 1)^3 + CONST_1 * (x - 1)^2 end
function easing_fn.inoutback(x)
	if x < 0.5 then
		return ((2 * x)^2 * ((CONST_2 + 1) * 2 * x - CONST_2)) / 2
	else
		return ((2 * x - 2)^2 * ((CONST_2 + 1) * (x * 2 - 2) + CONST_2) + 2) / 2
	end
end
function easing_fn.outbounce(x)
	if x < 1 / CONST_D then
		return CONST_N * x * x
	elseif x < 2 / CONST_D then
		x = x - (1.5 / CONST_D)
		return CONST_N * x * x + 0.75
	elseif x < 2.5 / CONST_D then
		x = x - (2.25 / CONST_D)
		return CONST_N * x * x + 0.9375
	else
		x = x - (2.625 / CONST_D)
		return CONST_N * x * x + 0.984375
	end
end
function easing_fn.inbounce(x)
	return 1 - easing_fn.outbounce(1 - x)
end
function easing_fn.inoutbounce(x)
	if x < 0.5 then
		return (1 - easing_fn.outbounce(1 - 2 * x)) / 2
	else
		return (1 + easing_fn.outbounce(2 * x - 1)) / 2
	end
end
	

local function build_graph()
	delete_graph()
	local nodes
	if current_easing == "custom" then
		nodes = action_tab.easing.nodes
	end
	local x_dist = 1 / (vertex_count - 1)
	for i = 0, vertex_count - 1 do
		local x, y
		if nodes then
			y = nodes[i + 1].comp
			x = nodes[i + 1].time
		else
			x = i * x_dist
			y = easing_fn[current_easing](x)
		end
		local new_node = gui.clone(vertex_temp)
		local pos = vmath.vector3(x * GRAPH_SIZE_X, y * GRAPH_SIZE_Y, 0)
		table.insert(vertices, {node = new_node, pos = pos})
		gui.set_position(new_node, pos)
		gui.set_enabled(new_node, true)
		if i > 0 then
			new_node = gui.clone(line_temp)
			local prev_pos = vertices[#vertices - 1].pos
			gui.set_position(new_node, prev_pos)
			gui.set(new_node, "size.x", vmath.length(prev_pos - pos) * 4)
			local angle = math.atan2(pos.x - prev_pos.x, prev_pos.y - pos.y) - HALF_PI
			gui.set(new_node, "euler.z", math.deg(angle))
			table.insert(lines, new_node)
			gui.set_enabled(new_node, true)
		end
	end
end

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"easing_accept", "easing_cancel", "easing_separate", "sections_plus", "sections_minus"}, DIALOG_NAME)
	for key in pairs(easing_fn) do
		UI.load_template(key, DIALOG_NAME)
	end
	vertex_temp, line_temp = gui.get_node("vertex_template"), gui.get_node("line_template")
	local validation = {
		integer = true,
		min = function() return 2 end,
		max = function() return 99 end,
		default = function() return 6 end
	}
	UI.load_text_field("sections", 2, DIALOG_NAME, validation)
	graph_node = gui.get_node("graph")
	local pos = gui.get_position(graph_node)
	local size = gui.get_size(graph_node) * gui.get(graph_node, "scale.y")
	pos.x = pos.x + size.x
	pos.y = pos.y + size.y
	aux_node = gui.new_box_node(pos, vmath.vector3(1))
	gui.set_parent(aux_node, gui.get_node("edit_box"))
	gui.set_visible(aux_node, false)
	gui.set_text(gui.get_node("vertex_info"), "")
end

local function get_vertex_data(vertex_index)
	local pos = gui.get_position(vertices[vertex_index].node)
	local time = math.floor((pos.x * 0.25) * 100) * 0.01
	local comp = math.floor((pos.y * 0.25) * 100) * 0.01
	return time, comp
end

function evaluate_button(button, item)
	if button == "easing_accept" or button == "enter" then
		local easing = {vertex_count = vertex_count, easing_type = current_easing, nodes = {}}
		for key in ipairs(vertices) do
			local t, c = get_vertex_data(key)
			table.insert(easing.nodes, {time = t * 0.01, comp = c * 0.01})
		end
		action_tab.easing = easing
		DIALOG.close(DIALOG_NAME, {easing = true, action_index = action_index})
	elseif button == "easing_cancel" or button == "escape" then
		DIALOG.close(DIALOG_NAME)
	elseif button == "sections_plus" then
		if vertex_count < 99 and not (current_easing == "custom") then
			vertex_count = vertex_count + 1
			gui.set_text(gui.get_node("sections/text"), vertex_count - 1)
			build_graph()
		end
	elseif button == "sections_minus" then
		if vertex_count > 2 and not (current_easing == "custom") then
			vertex_count = vertex_count - 1
			gui.set_text(gui.get_node("sections/text"), vertex_count - 1)
			build_graph()
		end
	elseif button == "easing_separate" then
		local easing = {vertex_count = vertex_count, easing_type = current_easing, nodes = {}}
		for key in ipairs(vertices) do
			local t, c = get_vertex_data(key)
			table.insert(easing.nodes, {time = t * 0.01, comp = c * 0.01})
		end
		action_tab.easing = easing
		DIALOG.close(DIALOG_NAME, {easing = true, separate = true, action_index = action_index})
	elseif easing_fn[button] then
		current_easing = button
		build_graph()
	end
end

function evaluate_input(field, text)
	if field == "sections" then
		if not (current_easing == "custom") then
			vertex_count = text + 1
			build_graph()
		else
			gui.set_text(gui.get_node("sections/text"), vertex_count - 1)
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		action_index = message.action_index
		action_tab = MEM.art_data.transform_tab_temp
		MEM.art_data.transform_tab_temp = nil
		if action_tab.easing then
			vertex_count = action_tab.easing.vertex_count
			current_easing = action_tab.easing.easing_type
		else
			vertex_count = 2
			current_easing = "linear"
		end
		gui.set_text(gui.get_node("sections/text"), vertex_count - 1)
		vertex_dragged = false
		current_vertex = nil
		DIALOG_DATA.dialog_active = true
		gui.set_scale(vertex_temp, vmath.vector3(SET.easing_node_scale))
		gui.set(line_temp, "size.y", SET.easing_curve_thickness)
		gui.set_color(vertex_temp, SET.easing_node_colour)
		gui.set_color(line_temp, SET.easing_curve_colour)
		build_graph()
	end
end

local function adjust_lines()
	local angle, pos_1, pos_2, pos_3, line_1, line_2
	pos_2 = gui.get_position(vertices[current_vertex].node)
	if current_vertex > 1 then
		pos_1 = gui.get_position(vertices[current_vertex - 1].node)
		line_1 = lines[current_vertex - 1]
		angle = math.atan2(pos_2.x - pos_1.x, pos_1.y - pos_2.y) - HALF_PI	
		gui.set(line_1, "euler.z", math.deg(angle))
		gui.set(line_1, "size.x", vmath.length(pos_2 - pos_1) * 4)
	end
	if current_vertex < #vertices then
		pos_3 = gui.get_position(vertices[current_vertex + 1].node)
		line_2 = lines[current_vertex]
		gui.set_position(line_2, pos_2)
		angle = math.atan2(pos_3.x - pos_2.x, pos_2.y - pos_3.y) - HALF_PI
		gui.set(line_2, "euler.z", math.deg(angle))
		gui.set(line_2, "size.x", vmath.length(pos_3 - pos_2) * 4)
	end
	current_easing = "custom"
end

local function show_vertex_info()
	if current_vertex then
		local time, comp = get_vertex_data(current_vertex)
		gui.set_text(gui.get_node("vertex_info"), "Time: "..string.format(" %.2f", time).." %\nCompletion: "..string.format(" %.2f", comp).."%")
	else
		gui.set_text(gui.get_node("vertex_info"), "")
	end
end

local function delete_vertex(vertex)
	if vertex == 1 or vertex == #vertices then
		return
	end
	gui.delete_node(vertices[current_vertex].node)
	table.remove(vertices, current_vertex)
	gui.delete_node(lines[current_vertex])
	table.remove(lines, current_vertex)
	adjust_lines()
	current_vertex = nil
	show_vertex_info()
	vertex_count = vertex_count - 1
	gui.set_text(gui.get_node("sections/text"), vertex_count - 1)
end

local function add_vertex(x, y)
	local new_index
	for key, val in ipairs(vertices) do
		if gui.get_screen_position(val.node).x > x then
			new_index = key
			break
		end
	end
	local prev_pos = gui.get_position(vertices[new_index - 1].node)
	local next_pos = gui.get_position(vertices[new_index].node)
	local new_node = gui.clone(vertex_temp)
	local pos = vmath.vector3((next_pos.x + prev_pos.x) * 0.5, (next_pos.y + prev_pos.y) * 0.5, 0)
	table.insert(vertices, new_index, {node = new_node, pos = pos})
	gui.set_position(new_node, pos)
	gui.set_enabled(new_node, true)
	
	new_node = gui.clone(line_temp)
	table.insert(lines, new_index, new_node)
	gui.set_enabled(new_node, true)
	current_vertex = new_index
	adjust_lines()
	current_vertex = nil
	vertex_count = vertex_count + 1
	gui.set_text(gui.get_node("sections/text"), vertex_count - 1)
end


function on_input(self, action_id, action)
	if vertex_dragged then
		if action_id == hash("touch") and action.released then
			vertex_dragged = false
			gui.set(vertices[current_vertex].node, "color", SET.easing_node_colour)
			current_vertex = nil
		else
			local min_x, max_x, min_y, max_y
			if current_vertex == 1 then
				min_x = gui.get_screen_position(graph_node).x
				max_x = min_x
			elseif current_vertex == #vertices then
				max_x = gui.get_screen_position(aux_node).x
				min_x = max_x
			else
				max_x = gui.get_screen_position(vertices[current_vertex + 1].node).x
				min_x = gui.get_screen_position(vertices[current_vertex - 1].node).x
			end
			max_y = gui.get_screen_position(aux_node).y
			min_y = gui.get_screen_position(graph_node).y
			local pos = gui.get_screen_position(vertices[current_vertex].node)
			pos.x = action.screen_x
			pos.x = math.max(min_x, math.min(max_x, pos.x))
			pos.y = action.screen_y
			pos.y = math.max(min_y, pos.y)
			pos.y = math.max(min_y, math.min(max_y, pos.y))
			gui.set_screen_position(vertices[current_vertex].node, pos)
			adjust_lines()
			show_vertex_info()
		end
	else
		if gui.pick_node(graph_node, action.x, action.y) then
			if action_id == hash("touch") and action.pressed and current_vertex then
				vertex_dragged = true
			elseif action_id == hash("r_click") and action.pressed then
				if current_vertex then 
					delete_vertex(current_vertex)
				else
					add_vertex(action.screen_x, action.screen_y)
				end
			else
				local new_hover
				for key, val in ipairs(vertices) do
					if gui.pick_node(val.node, action.x, action.y) then
						new_hover = key
						break
					end
				end
				if current_vertex and not (current_vertex == new_hover) then
					gui.set(vertices[current_vertex].node, "color", SET.easing_node_colour)
				end
				if new_hover then
					if not (current_vertex == new_hover) then
						gui.set(vertices[new_hover].node, "color", SET.easing_node_highlight_colour)
						current_vertex = new_hover
						show_vertex_info()
					end
				else
					current_vertex = nil
					show_vertex_info()
				end
			end
		else
			if current_vertex then
				gui.set(vertices[current_vertex].node, "color", SET.easing_node_colour)
				current_vertex = nil
				show_vertex_info()
			end
			UI.on_input(DIALOG_NAME, action_id, action, evaluate_button, evaluate_input)
		end
	end
end