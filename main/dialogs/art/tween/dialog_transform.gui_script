local UI = require "modules.ui"
local MEM = require "modules.memory"
local SET = require "modules.settings"
local G = require "modules.global"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_transform"
local DIALOG_DATA

local evaluate_button, model_index, model_tab, list, selected_transform
local transform_list = {}

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"transform_close", "transform_delete", "transform_parent", "transform_tween", "transform_rename"}, DIALOG_NAME)
	local transform_list_tab = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("transform_exclusive/button_white"),
			text_node = gui.get_node("transform_exclusive/text"),
			value_fn = function(i)
				local str = ""
				local space = ""
				for i = 1, transform_list[i].level - 1 do
					str = str.."--"
					space = " "
				end
				return str..space..transform_list[i].name
			end,
			template = "transform_exclusive;",
			tint = function(i)
				if transform_list[i].tween then
					return SET.colour_highlight_tween
				else
					return vmath.vector4(1, 1, 1, 1)
				end
			end,
			fn = evaluate_button
		},
		{
			type = hash("label"),
			node = gui.get_node("lbl_submesh"),
			value_fn = function(i) return transform_list[i].mesh_count end
		},
		item_count = 0,
		scroll_prefix = "transform_list_"
	}
	list = UI.create_list(DIALOG_NAME, gui.get_node("transform_list"), transform_list_tab)
end

local function transform_selected(selection)
	selected_transform = selection
	local parts = {}
	local level = transform_list[selected_transform].level
	local function add_parts(index)
		if transform_list[index].part_index then
			for j = 0, transform_list[index].mesh_count - 1 do
				table.insert(parts, transform_list[index].part_index + j)
			end
		end
	end
	add_parts(selected_transform)
	for i = selected_transform + 1, #transform_list do
		if transform_list[i].level > level then
			add_parts(i)
		else
			break
		end
	end
	if #parts > 0 then
		MEM.art_data.temp_part_list = parts
		msg.post("/model_viewer", hash("flash_multiple"))
	else
		msg.post("/model_viewer", hash("stop_flashing_multiple"))
	end
end

function evaluate_button(button, item)
	if button == "transform_close" or button == "escape" then
		msg.post("/model_viewer", hash("stop_flashing_multiple"))
		DIALOG.close(DIALOG_NAME)
		model_index = nil
		transform_list = {}
		UI.update_list(DIALOG_NAME, list, 0)
	elseif button == "transform_delete" then
		if not selected_transform then
			G.update_navbar("Select a transform first", true)
		else

		end		
	elseif button == "transform_parent" then
		if not selected_transform then
			G.update_navbar("Select a transform first", true)
		else

		end		
	elseif button == "transform_tween" then
		if not selected_transform then
			G.update_navbar("Select a transform first", true)
		else
			msg.post("/model_viewer", hash("disable_input"))
			msg.post("/model_viewer", hash("stop_flashing_multiple"))
			DIALOG.open(DIALOG_NAME, "dialog_tween", {model_index = model_index, transform_index = selected_transform})
		end
	elseif button == "transform_rename" then
		if not selected_transform then
			G.update_navbar("Select a transform first", true)
		else

		end
	elseif button == list then
		transform_selected(item)
	end
end

local function refresh_transform_list()
	transform_list = {}
	local part_index = 1
	local selection
	local function find_transform(tab, level)
		local mesh_count = 0
		if tab.meshes then
			mesh_count = #tab.meshes
		end
		if not (tab.name and (tab.name == "Colliders")) then
			local _part_index
			if mesh_count > 0 then _part_index = part_index end
			table.insert(transform_list, {name = tab.name or "[no name]", level = level, tween = tab.tween, mesh_count = mesh_count, part_index = _part_index, tab = tab.tab})
			if tab.tween then
				selection = selection or #transform_list
			end
			part_index = part_index + mesh_count
			for key, val in ipairs(tab) do
				find_transform(val, level + 1)
			end
		end
	end
	find_transform(model_tab, 1)
	UI.update_list(DIALOG_NAME, list, #transform_list)
	return selection
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		model_index = message.model_index
		model_tab = MEM.art_data.table.propsDictionary[model_index].model_data.model_tree
		local selection = refresh_transform_list() or 1
		UI.select_exclusive_button(DIALOG_NAME, list, selection)
		transform_selected(selection)
		DIALOG.show(DIALOG_DATA, sender)
	elseif message_id == hash("hide") then
		if model_tab then
			refresh_transform_list()
			msg.post("/art#tab_art", hash("check_tweens"))
		end
	elseif message_id == hash("dialog_closed") then
		msg.post("#", hash("acquire_input_focus"))
		msg.post("/model_viewer", hash("show"))
		if message.dialog == "dialog_tween" then
			refresh_transform_list()
			msg.post("/art#tab_art", hash("check_tweens"))
		end
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(DIALOG_DATA.scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button)
end