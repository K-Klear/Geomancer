local MEM = require "modules.memory"
local UI = require "modules.ui"
local SET = require "modules.settings"
local G = require "modules.global"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_tween"
local DIALOG_DATA

local action_list, model_index, model_name, tween_actions, signal, evaluate_button
local path_to_tween

local function calculate_tween_speed(action_index)
	local action = tween_actions[action_index]
	local v1 = vmath.vector3(action.start_state.x, action.start_state.y, action.start_state.z)
	local v2 = vmath.vector3(action.end_state.x, action.end_state.y, action.end_state.z)
	local speed = vmath.length(v1 - v2) / action.time
	if not (speed == speed) then
		speed = 1/0
	end
	return math.floor(speed * 100) / 100
end

local function calculate_tween_time(action_index, speed)
	local tween_script = tween_actions[action_index]
	local v1 = vmath.vector3(tween_script.start_state.x, tween_script.start_state.y, tween_script.start_state.z)
	local v2 = vmath.vector3(tween_script.end_state.x, tween_script.end_state.y, tween_script.end_state.z)
	local time = vmath.length(v1 - v2) / speed
	if not (time == time) or (math.abs(time) == 1/0) then
		time = 0
	end
	return math.floor(time * 10000) / 10000
end

local function check_repeat_validity(action_index)
	local repeat_count = tween_actions[action_index].actions_to_repeat
	if action_index > repeat_count then
		for i = action_index - repeat_count, action_index - 1 do
			if tween_actions[i].type == "X" then return end
		end
		return true
	end
end

local function display_total_time()
	local time = 0
	for key, val in ipairs(tween_actions) do
		if val.type == "X" then
			if check_repeat_validity(key) then
				for i = 1, val.number_of_repetitions do
					for j = key - val.actions_to_repeat, key - 1 do
						time = time + tween_actions[j].time
					end
				end
			end
		else
			time = time + val.time
		end
	end
	gui.set_text(gui.get_node("lbl_tween_duration"), "Total duration:\n"..time.." seconds.")
end

local action_types = {T = "Move", R = "Rotate", S = "Scale", W = "Wait", X = "Repeat"}

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"dialog_tween_close", "dialog_tween_add", "dialog_tween_copy", "dialog_tween_delete", "dialog_tween_save", "dialog_tween_load", "dialog_tween_event"}, DIALOG_NAME)
	UI.load_text_field("tween_signal", 14, DIALOG_NAME, {text = true, json_safe = true, not_empty = true, default = function() return signal end})
	local function is_not_wait(i)
		return not (tween_actions[i].type == "W" or tween_actions[i].type == "X")
	end
	local function is_repeat(i)
		return tween_actions[i].type == "X"
	end
	local validation_xyz = {number = true, default = function() return 0 end}
	local validation_time = {number = true, min = function() return 0 end, default = function() return 0 end}
	local validation_repeat_actions = {integer = true, min = function() return 1 end, max = function(i) return math.max(i - 1, 1) end, default = function() return 1 end}
	local validation_repeat = {integer = true, min = function() return 1 end, default = function() return 1 end}
	local function get_repeat_label(i)
		local action_str = "actions"
		local repeat_str = "times."
		if tween_actions[i].actions_to_repeat == 1 then
			action_str = "action  "
		end
		if tween_actions[i].number_of_repetitions == 1 then
			repeat_str = "time."
		end
		return "Repeat previous          "..action_str.."          "..repeat_str
	end
	local action_list_tab = {
		{
			type = hash("button"),
			node = gui.get_node("tween_up/button_white"),
			text_node = gui.get_node("tween_up/text"),
			value_fn = function() return "" end,
			template = "tween_up;",
			enabled = function(i)
				return not (i == 1)
			end
		},
		{
			type = hash("button"),
			node = gui.get_node("tween_down/button_white"),
			text_node = gui.get_node("tween_down/text"),
			value_fn = function() return "" end,
			template = "tween_down;",
			enabled = function(i)
				return not (i == #tween_actions)
			end
		},
		{
			type = hash("button"),
			node = gui.get_node("tween_type/button_white"),
			text_node = gui.get_node("tween_type/text"),
			value_fn = function(i)
				return action_types[tween_actions[i].type]
			end,
			template = "tween_type;",
			enabled = function(i)
				return true
			end
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_time/box"),
			text_node = gui.get_node("tween_time/text"),
			value_fn = function(i)
				return tween_actions[i].time or ""
			end,
			template = "tween_time;",
			enabled = function(i) return not (tween_actions[i].type == "X") end,
			validation = validation_time,
			char_limit = 6
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_start_x/box"),
			text_node = gui.get_node("tween_start_x/text"),
			value_fn = function(i)
				if tween_actions[i].start_state then
					return tween_actions[i].start_state.x
				else
					return "N/A"
				end
			end,
			template = "tween_start_x;",
			enabled = is_not_wait,
			validation = validation_xyz,
			char_limit = 9
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_start_y/box"),
			text_node = gui.get_node("tween_start_y/text"),
			value_fn = function(i)
				if tween_actions[i].start_state then
					return tween_actions[i].start_state.y
				else
					return "N/A"
				end
			end,
			template = "tween_start_y;",
			enabled = is_not_wait,
			validation = validation_xyz,
			char_limit = 9
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_start_z/box"),
			text_node = gui.get_node("tween_start_z/text"),
			value_fn = function(i)
				if tween_actions[i].start_state then
					return tween_actions[i].start_state.z
				else
					return "N/A"
				end
			end,
			template = "tween_start_z;",
			enabled = is_not_wait,
			validation = validation_xyz,
			char_limit = 9
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_end_x/box"),
			text_node = gui.get_node("tween_end_x/text"),
			value_fn = function(i)
				if tween_actions[i].end_state then
					return tween_actions[i].end_state.x
				else
					return "N/A"
				end
			end,
			template = "tween_end_x;",
			enabled = is_not_wait,
			validation = validation_xyz,
			char_limit = 9
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_end_y/box"),
			text_node = gui.get_node("tween_end_y/text"),
			value_fn = function(i)
				if tween_actions[i].end_state then
					return tween_actions[i].end_state.y
				else
					return "N/A"
				end
			end,
			template = "tween_end_y;",
			enabled = is_not_wait,
			validation = validation_xyz,
			char_limit = 9
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_end_z/box"),
			text_node = gui.get_node("tween_end_z/text"),
			value_fn = function(i)
				if tween_actions[i].end_state then
					return tween_actions[i].end_state.z
				else
					return "N/A"
				end
			end,
			template = "tween_end_z;",
			enabled = is_not_wait,
			validation = validation_xyz,
			char_limit = 9
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_speed/box"),
			text_node = gui.get_node("tween_speed/text"),
			value_fn = function(i)
				return calculate_tween_speed(i)
			end,
			template = "tween_speed;",
			enabled = function(i)
				return tween_actions[i].type == "T"
			end,
			validation = validation_time,
			char_limit = 9
		},
		{
			type = hash("button"),
			node = gui.get_node("tween_part/button_white"),
			text_node = gui.get_node("tween_part/text"),
			value_fn = function(i)
				return MEM.art_data.part_names[model_name][tween_actions[i].part] or "[whole prop]"
			end,
			template = "tween_part;",
			enabled = is_not_wait
		},
		{
			type = hash("button"),
			node = gui.get_node("tween_delete/button_white"),
			text_node = gui.get_node("tween_delete/text"),
			value_fn = function() return "Delete" end,
			template = "tween_delete;"
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_repeat_action_count/box"),
			text_node = gui.get_node("tween_repeat_action_count/text"),
			value_fn = function(i)
				return tween_actions[i].actions_to_repeat
			end,
			template = "tween_repeat_action_count;",
			enabled = is_repeat,
			validation = validation_repeat_actions,
			char_limit = 2
		},
		{
			type = hash("field"),
			node = gui.get_node("tween_repeat_count/box"),
			text_node = gui.get_node("tween_repeat_count/text"),
			value_fn = function(i)
				return tween_actions[i].number_of_repetitions
			end,
			template = "tween_repeat_count;",
			enabled = is_repeat,
			validation = validation_repeat,
			char_limit = 2
		},
		{
			type = hash("label"),
			node = gui.get_node("lbl_tween_repeat"),
			value_fn = get_repeat_label,
			enabled = is_repeat
		},
		{
			type = hash("button"),
			node = gui.get_node("tween_easing/button_white"),
			text_node = gui.get_node("tween_easing/text"),
			value_fn = function(i)
				if tween_actions[i].easing then
					return tween_actions[i].easing.easing_type
				else
					return "linear"
				end
			end,
			template = "tween_easing;",
			enabled = is_not_wait
		},
		item_count = 0,
		scroll_prefix = "tween_"
	}
	if SET.tween_extra_add_buttons then
		table.insert(action_list_tab, 		{
			type = hash("button"),
			node = gui.get_node("tween_add/button_white"),
			text_node = gui.get_node("tween_add/text"),
			value_fn = function() return "Add new action" end,
			template = "tween_add;"
		})
		for key, val in ipairs(action_list_tab) do
			if val.node then
				gui.set(val.node, "position.y", gui.get(val.node, "position.y") - 20)
			end
		end
	else
		gui.delete_node(gui.get_node("tween_add/text"))
		gui.delete_node(gui.get_node("tween_add/button_white"))
	end
	action_list = UI.create_list(DIALOG_NAME, gui.get_node("tween_list"), action_list_tab)
end

local function get_tween_defaults(action_type, current_action_index)
	local action_to_copy
	local new_action_tab = {}
	local index_start = (current_action_index or (#tween_actions + 1)) - 1
	for action_index = index_start, 1, -1 do
		if action_type then
			if tween_actions[action_index].type == action_type then
				if action_type == "X" then
					break
				else
					action_to_copy = action_index
				end
				break
			end
		elseif (tween_actions[action_index].type == "T") or (tween_actions[action_index].type == "S") or (tween_actions[action_index].type == "R") then
			action_type = tween_actions[action_index].type
			action_to_copy = action_index
			break
		end
	end
	action_type = action_type or "T"
	if action_to_copy then
		local action_to_copy_tab = tween_actions[action_to_copy]
		new_action_tab.part = action_to_copy_tab.part
		new_action_tab.time = action_to_copy_tab.time
		new_action_tab.type = action_type
		if action_type == "T" then
			new_action_tab.start_state = {x = action_to_copy_tab.start_state.x, y = action_to_copy_tab.start_state.y, z = action_to_copy_tab.start_state.z}
			new_action_tab.end_state = {x = action_to_copy_tab.end_state.x, y = action_to_copy_tab.end_state.y, z = action_to_copy_tab.end_state.z}
		elseif action_type == "R" then
			new_action_tab.start_state = {x = action_to_copy_tab.end_state.x, y = action_to_copy_tab.end_state.y, z = action_to_copy_tab.end_state.z}
			new_action_tab.end_state = {
				x = action_to_copy_tab.end_state.x + (action_to_copy_tab.end_state.x - action_to_copy_tab.start_state.x),
				y = action_to_copy_tab.end_state.y + (action_to_copy_tab.end_state.y - action_to_copy_tab.start_state.y),
				z = action_to_copy_tab.end_state.z + (action_to_copy_tab.end_state.z - action_to_copy_tab.start_state.z),
			}
			if SET.restrict_rotations_to_360 then
				for key, val in pairs(new_action_tab.start_state) do
					new_action_tab.start_state[key] = val % 360
				end
				for key, val in pairs(new_action_tab.end_state) do
					new_action_tab.end_state[key] = val % 360
				end
			end
		elseif action_type == "S" then
			new_action_tab.start_state = {x = action_to_copy_tab.end_state.x, y = action_to_copy_tab.end_state.y, z = action_to_copy_tab.end_state.z}
			new_action_tab.end_state = {x = action_to_copy_tab.start_state.x, y = action_to_copy_tab.start_state.y, z = action_to_copy_tab.start_state.z}
		end
	else
		local current = tween_actions[current_action_index]
		if current then
			if action_type == "T" then
				new_action_tab = {part = 0, type = action_type, start_state = {x = 0, y = 0, z = 0}, end_state = {x = 0, y = 0, z = 0}, time = 1}
			elseif action_type == "R" then
				new_action_tab = {part = current.part, type = action_type, start_state = current.start_state or {x = 0, y = 0, z = 0},
				end_state = current.end_state or {x = 0, y = 0, z = 0}, time = current.time or 1}
				if SET.restrict_rotations_to_360 then
					for key, val in pairs(new_action_tab.start_state) do
						new_action_tab.start_state[key] = val % 360
					end
					for key, val in pairs(new_action_tab.end_state) do
						new_action_tab.end_state[key] = val % 360
					end
				end
			elseif action_type == "S" then
				new_action_tab = {part = current.part, type = action_type, start_state = current.start_state or {x = 1, y = 1, z = 1},
				end_state = current.end_state or {x = 1, y = 1, z = 1}, time = current.time or 1}
			elseif action_type == "W" then
				new_action_tab = {time = current.time or 1, type = action_type}
			elseif action_type == "X" then
				new_action_tab = {type = action_type, actions_to_repeat = 1, number_of_repetitions = 2}
			end
		else
			if action_type == "T" or action_type == "R" then
				new_action_tab = {part = 0, type = action_type, start_state = {x = 0, y = 0, z = 0}, end_state = {x = 0, y = 0, z = 0}, time = 1}
			elseif action_type == "S" then
				new_action_tab = {part = 0, type = action_type, start_state = {x = 1, y = 1, z = 1}, end_state = {x = 1, y = 1, z = 1}, time = 1}
			elseif action_type == "W" then
				new_action_tab = {time = 1, type = action_type}
			elseif action_type == "X" then
				new_action_tab = {type = action_type, actions_to_repeat = 1, number_of_repetitions = 2}
			end
		end
	end
	return new_action_tab
end

local function evaluate_field(field, text, item)
	if field == "tween_signal" then
		signal = text
	else
		local div = string.find(field, ";")
		local str = string.sub(field, 1, div)
		if str == "tween_time;" then
			tween_actions[item].time = text
			display_total_time()
		elseif str == "tween_start_x;" then
			if tween_actions[item].type == "R" and SET.restrict_rotations_to_360 then
				text = text % 360
			end
			tween_actions[item].start_state.x = text
		elseif str == "tween_start_y;" then
			if tween_actions[item].type == "R" and SET.restrict_rotations_to_360 then
				text = text % 360
			end
			tween_actions[item].start_state.y = text
		elseif str == "tween_start_z;" then
			if tween_actions[item].type == "R" and SET.restrict_rotations_to_360 then
				text = text % 360
			end
			tween_actions[item].start_state.z = text
		elseif str == "tween_end_x;" then
			if tween_actions[item].type == "R" and SET.restrict_rotations_to_360 then
				text = text % 360
			end
			tween_actions[item].end_state.x = text
		elseif str == "tween_end_y;" then
			if tween_actions[item].type == "R" and SET.restrict_rotations_to_360 then
				text = text % 360
			end
			tween_actions[item].end_state.y = text
		elseif str == "tween_end_z;" then
			if tween_actions[item].type == "R" and SET.restrict_rotations_to_360 then
				text = text % 360
			end
			tween_actions[item].end_state.z = text
		elseif str == "tween_speed;" then
			tween_actions[item].time = calculate_tween_time(item, text)
			display_total_time()
		elseif str == "tween_repeat_action_count;" then
			tween_actions[item].actions_to_repeat = text
			display_total_time()
		elseif str == "tween_repeat_count;" then
			tween_actions[item].number_of_repetitions = text
			display_total_time()
		else
			return
		end
		UI.update_list(DIALOG_NAME, action_list)
	end
end

local function save_tween_data(path)
	local works, f = pcall(io.output, path)
	if works then
		io.write(json.encode(tween_actions))
		io.close(f)
	else
		msg.post("/navbar#navbar", hash("update_status"), {text = "Error saving tween data.", clear = true})
	end
end

function evaluate_button(button, item)
	if button == "dialog_tween_close" then
		DIALOG.close(DIALOG_NAME, {model_index = model_index, signal = signal})
		UI.update_list(DIALOG_NAME, action_list, 0)
	elseif button == "dialog_tween_add" then
		table.insert(tween_actions, get_tween_defaults())
		UI.update_list(DIALOG_NAME, action_list, #tween_actions)
		display_total_time()
	elseif button == "dialog_tween_copy" then
		DIALOG.open(DIALOG_NAME, "dialog_tween_copy", {model = model_index})
	elseif button == "dialog_tween_event" then
		DIALOG.open(DIALOG_NAME, "dialog_event", {data = {startSample = 0, payload = signal}})
	elseif button == "dialog_tween_save" then
		local _, path
		if sys.exists(SET.default_path_save_tween) then
			path = SET.default_path_save_tween
		else
			_, path = diags.open_folder(SET.default_path_save_tween)
		end
		if path then
			path = path.."\\"
			local filename = model_name
			local ext = ".pw_tween"
			if SET.ask_before_overwriting_tween_file and sys.exists(path..filename..ext) then
				path_to_tween = {path, filename, ext}
				local title = filename..ext.." already exitsts. Overwrite?"
				DIALOG.open(DIALOG_NAME, "dialog_confirm", {title = title, button_1 = "Overwrite", button_2 = "Rename", button_3 = "Cancel", subject = "overwrite_tween"})
			else
				save_tween_data(path..filename..ext)
			end
		end
	elseif button == "dialog_tween_load" then
		_, path = diags.open("pw_tween", SET.default_path_save_tween)
		if path then
			local f = io.open(path, "rb")
			if f then
				local tween_data = G.safe_decode(f:read("*a"), "saved tween")
				if tween_data then
					for i = 1, #tween_actions do
						tween_actions[i] = nil
					end
					for key, val in ipairs(tween_data) do
						tween_actions[key] = val
						if val.part and val.part > #MEM.art_data.part_names[model_name] then
							tween_actions[key].part = 0
						end
					end
				end
			end
		end
		display_total_time()
		UI.update_list(DIALOG_NAME, action_list, #tween_actions)
	elseif button == "dialog_tween_delete" then
		for i = #tween_actions, 1, -1 do
			tween_actions[i] = nil
		end
		display_total_time()
		UI.update_list(DIALOG_NAME, action_list, 0)
	else
		local div = string.find(button, ";")
		local str = string.sub(button, 1, div)
		if str == "tween_up;" then
			local tab = table.remove(tween_actions, item)
			table.insert(tween_actions, item - 1, tab)
			UI.update_list(DIALOG_NAME, action_list)
		elseif str == "tween_down;" then
			local tab = table.remove(tween_actions, item)
			table.insert(tween_actions, item + 1, tab)
			UI.update_list(DIALOG_NAME, action_list)
		elseif str == "tween_type;" then
			if SET.tween_action_type_dialog then
				DIALOG.open(DIALOG_NAME, "dialog_tween_action", {item = item})
			else
				local types = {"T", "R", "S", "W", "X"}
				for key, val in ipairs(types) do
					if tween_actions[item].type == val then
						tween_actions[item].type = types[key + 1] or types[1]
						if tween_actions[item].type == "X" and item == 1 then
							tween_actions[item].type = "T"
						end
						tween_actions[item] = get_tween_defaults(tween_actions[item].type, item)
						break
					end
				end
				UI.update_list(DIALOG_NAME, action_list)
				display_total_time()
			end
		elseif str == "tween_delete;" then
			table.remove(tween_actions, item)
			UI.update_list(DIALOG_NAME, action_list, #tween_actions)
			display_total_time()
		elseif str == "tween_part;" then
			if SET.tween_part_dialog then
				DIALOG.open(DIALOG_NAME, "dialog_tween_part", {
					part_index = tween_actions[item].part, action_index = item, model = model_index, model_name = MEM.art_data.model_list[model_index].name
				})
			else
				tween_actions[item].part = tween_actions[item].part + 1
				if tween_actions[item].part > #MEM.art_data.part_names[model_name] then
					tween_actions[item].part = 0
				end
				UI.update_list(DIALOG_NAME, action_list)
			end
		elseif str == "tween_add;" then
			table.insert(tween_actions, item, get_tween_defaults(nil, item))
			UI.update_list(DIALOG_NAME, action_list, #tween_actions)
			display_total_time()
		elseif str == "tween_easing;" then
			DIALOG.open(DIALOG_NAME, "dialog_easing", {model_index = model_index, action_index = item})
		end
	end
end

local function copy_tween(source_index, target_index)
	local source_tween = MEM.art_data.model_list[source_index].tween
	local target_tween = {}
	signal = source_tween.signal
	for key, val in ipairs(source_tween.script) do
		local start_state, end_state
		local easing
		if val.start_state then
			start_state = {x = val.start_state.x, y = val.start_state.y, z = val.start_state.z}
			end_state = {x = val.end_state.x, y = val.end_state.y, z = val.end_state.z}
		end
		if val.easing then
			easing = {easing_type = val.easing.easing_type, vertex_count = val.easing.vertex_count, nodes = {}}
			for k, v in ipairs(val.easing.nodes) do
				table.insert(easing.nodes, {time = v.time, comp = v.comp})
			end
		end
		local source_name = MEM.art_data.model_list[source_index].name
		local target_name = MEM.art_data.model_list[target_index].name
		local part
		if MEM.art_data.part_names[target_name][val.part] and MEM.art_data.part_names[target_name][val.part] == MEM.art_data.part_names[source_name][val.part] then
			part = val.part
		else
			part = 0
		end
		target_tween[key] = {type = val.type, part = part, time = val.time, start_state = start_state, end_state = end_state,
		actions_to_repeat = val.actions_to_repeat, number_of_repetitions = val.number_of_repetitions, easing = easing}
	end
	tween_actions = target_tween
	MEM.art_data.model_list[target_index].tween.signal = signal
	MEM.art_data.model_list[target_index].tween.script = tween_actions
	gui.set_text(gui.get_node("tween_signal/text"), signal)
	display_total_time()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		model_index = message.model_index
		model_name = MEM.art_data.model_list[model_index].name
		tween_actions = MEM.art_data.model_list[model_index].tween.script
		signal = MEM.art_data.model_list[model_index].tween.signal
		gui.set_text(gui.get_node("tween_signal/text"), signal)
		UI.update_list(DIALOG_NAME, action_list, #tween_actions)
		display_total_time()
	elseif message_id == hash("hide") then
		msg.post(DIALOG_DATA.parent_tab, hash("tween_closed"), {model_index = model_index, signal = signal})
		tween_actions = nil
		signal = nil
	elseif message_id == hash("dialog_closed") then
		msg.post("#", hash("acquire_input_focus"))
		if message.dialog == "dialog_tween_action" then
			if message.item then
				tween_actions[message.item].type = message.action
				tween_actions[message.item] = get_tween_defaults(message.action, message.item)
				UI.update_list(DIALOG_NAME, action_list)
				display_total_time()
			end
		elseif message.dialog == "dialog_tween_copy" then
			if message.selected_model then
				copy_tween(message.selected_model, model_index)
				UI.update_list(DIALOG_NAME, action_list, #tween_actions)
				display_total_time()
			end
		elseif message.dialog == "dialog_tween_part" then
			if message.selected_part then
				tween_actions[message.action_index].part = message.selected_part
				UI.update_list(DIALOG_NAME, action_list)
			end
		elseif message.dialog == "dialog_easing" then
			if message.easing then
				UI.update_list(DIALOG_NAME, action_list)
			end
		elseif message.dialog == "dialog_confirm" then
			if message.button == 1 then 			-- buttons are 1 = overwrite, 2 = rename, 3 = cancel
				save_tween_data(path_to_tween[1]..path_to_tween[2]..path_to_tween[3])
				path_to_tween = nil
			elseif message.button == 2 then
				local i = 0
				local new_path
				repeat
					i = i + 1
					new_path = path_to_tween[1]..path_to_tween[2].."("..i..")"..path_to_tween[3]
					if i > 999999 then break end
				until not (sys.exists(new_path))
				if i > 999999 then
					msg.post("/navbar#navbar", hash("update_status"), {text = "Error finding a new filename. Tween not saved", clear = true})
				end
				save_tween_data(new_path)
			elseif message.button == 3 then
				path_to_tween = nil
			end
		end
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(UI.tab[DIALOG_NAME].scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button, evaluate_field)
end