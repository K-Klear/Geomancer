local MEM = require "modules.memory"
local UI = require "modules.ui"
local SET = require "modules.settings"
local G = require "modules.global"
local DIALOG = UI.DIALOG
local DIALOG_NAME = "dialog_import"
local DIALOG_DATA

local import_model_list, evaluate_button
local import_list = {}
local selection_list = {}

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"dialog_import_cancel", "dialog_import_accept", "dialog_import_none", "dialog_import_all"}, DIALOG_NAME)
	local model_list = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("import_model_exclusive/button_white"),
			text_node = gui.get_node("import_model_exclusive/text"),
			value_fn = function(i) return import_list[i] end,
			template = "import_model_exclusive;",
			fn = evaluate_button,
			tint = function(i)
				if selection_list[import_list[i]] then
					return SET.colour_model_import_selection
				else
					return vmath.vector4(1, 1, 1, 1)
				end
			end,
		},
		item_count = 0,
		scroll_prefix = "import_model_"
	}
	import_model_list = UI.create_list(DIALOG_NAME, gui.get_node("import_model_list"), model_list)
end

local function update_label()
	local selected_count = 0
	for key, val in pairs(selection_list) do
		selected_count = selected_count + 1
	end
	gui.set_text(gui.get_node("import_models_label"), selected_count.." models selected for import.\n\n"..#import_list.." total models available.")
end

function evaluate_button(button, item)
	if button == "dialog_import_accept" or button == "enter" then
		if next(selection_list) then
			for key, val in ipairs(import_list) do
				if not selection_list[val] then
					MEM.art_data.models_for_import_ignore[val] = true
				end
			end
			DIALOG.close(DIALOG_NAME, {import = true})
			UI.update_list(DIALOG_NAME, import_model_list, 0)
		else
			G.update_navbar("No models selected.", true)
		end
	elseif button == "dialog_import_cancel" or button == "escape" then
		DIALOG.close(DIALOG_NAME)
		MEM.art_data.models_for_import = nil
		MEM.art_data.models_for_import_ignore = nil
		UI.update_list(DIALOG_NAME, import_model_list, 0)
	elseif button == "dialog_import_none" then
		selection_list = {}
		update_label()
		UI.update_list(DIALOG_NAME, import_model_list)
	elseif button == "dialog_import_all" then
		for key, val in ipairs(import_list) do
			selection_list[val] = true
		end
		update_label()
		UI.update_list(DIALOG_NAME, import_model_list)
	elseif button == import_model_list then
		UI.select_exclusive_button(DIALOG_NAME, import_model_list, 0, true)
		if selection_list[import_list[item]] then
			selection_list[import_list[item]] = nil
		else
			selection_list[import_list[item]] = true
		end
		update_label()
		UI.update_list(DIALOG_NAME, import_model_list)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		MEM.art_data.models_for_import_ignore = {}
		for key, val in ipairs(MEM.art_data.table.propsDictionary) do
			MEM.art_data.models_for_import_ignore[val.key] = true
		end
		local ignore_count = 0
		import_list = {}
		selection_list = {}
		for key, val in ipairs(MEM.art_data.models_for_import) do
			if MEM.art_data.models_for_import_ignore[val.key] then
				ignore_count = ignore_count + 1
			else
				table.insert(import_list, val.key)
			end
		end
		if #import_list == 0 then
			DIALOG.close(DIALOG_NAME)
			G.update_navbar("No new models found. Import aborted.")
		else
			if ignore_count > 0 then
				if ignore_count == 1 then
					G.update_navbar("One model already present in the map have been skipped.")
				else
					G.update_navbar(ignore_count.." models already present in the map have been skipped.")
				end
			end
			UI.update_list(DIALOG_NAME, import_model_list, #import_list)
			update_label()
		end
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(DIALOG_DATA.scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button)
end