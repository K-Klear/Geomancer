local UI = require "modules.ui"
local DIALOG = UI.DIALOG

local material_list, evaluate_button
local DIALOG_NAME = "material"
local DIALOG_DATA

local material_names = {
	"Default", "Heartbreaker", "Alien Planet", "2089 - Arbiter", "2089 - Robot Facilities", "2089 - Strange Creatures",
	"AP2 Cave", "AP2 Desert", "Western Town", "OldWest Train", "Castle", "ShredFactory",
	"HalloweenParty", "ArtDeco", "MyMind", "Odin"
}

function init(self)
	DIALOG.setup(DIALOG_NAME)
	DIALOG_DATA = UI.tab[DIALOG_NAME]
	UI.load_template({"material_guide", "dialog_material_cancel"}, DIALOG_NAME)
	local material_list_tab = {
		{
			type = hash("exclusive_button"),
			node = gui.get_node("material_exclusive/button_white"),
			text_node = gui.get_node("material_exclusive/text"),
			value_fn = function(i) return material_names[i] end,
			template = "material_exclusive;",
			fn = evaluate_button
		},
		item_count = #material_names,
		scroll_prefix = "material_"
	}
	material_list = UI.create_list(DIALOG_NAME, gui.get_node("material_list"), material_list_tab)
end

function evaluate_button(button, item)
	if button == "dialog_material_cancel" or button == "escape" or button == "enter" then
		DIALOG.close(DIALOG_NAME)
	elseif button == "material_guide" then
		sys.open_url("https://mod.io/g/pistol-whip/r/materials-and-obstacles")
	elseif button == material_list then
		msg.post(DIALOG_DATA.parent_tab, hash("dialog_closed"), {dialog = "material", material = material_names[item]})
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		DIALOG.show(DIALOG_DATA, sender)
		local material_index = 0
		for key, val in ipairs(material_names) do
			if message.current_set == val then
				material_index = key
				break
			end
		end
		UI.select_exclusive_button(DIALOG_NAME, material_list, material_index, true)
	end
end

function update()
	if DIALOG_DATA.dialog_open then
		for list_index in pairs(DIALOG_DATA.scrolling) do
			UI.move_list_root(DIALOG_NAME, list_index, true)
		end
	end
end

function on_input(self, action_id, action)
	UI.on_input(DIALOG_NAME, action_id, action, evaluate_button)
end