local SET = require "modules.settings"
local COL = require "modules.colours"

local proxy_is_loaded, settings_are_loaded

local function start()
	if settings_are_loaded and proxy_is_loaded then
		msg.post("#main", "enable")
		msg.post("#main", "acquire_input_focus")
		msg.post("@render:", hash("use_camera_mine"))
	end
end


local function load_old_config()
	local settings_to_load = {
		autodetect_sample_rate = {type = "boolean"},
		default_sample_rate = {type = "integer"},
		new_event_sample_offset = {type = "integer"},
		background_colour = {type = "colour"},
		colour_active_text_field = {type = "colour"},
		colour_highlight_material = {type = "colour"},
		colour_highlight_dynamic = {type = "colour"},
		colour_highlight_tween = {type = "colour"},
		colour_model_import_selection = {type = "colour"},
		colour_model_replace = {type = "colour"},
		colour_unsupported_obstacle = {type = "colour"},
		colour_current_enemy_set = {type = "colour"},
		colour_selection_change_enemy_type = {type = "colour"},
		colour_current_enemy_type = {type = "colour"},
		colour_highlight_replace_enemy = {type = "colour"},
		colour_tween_move = {type = "colour"},
		colour_tween_rotate = {type = "colour"},
		colour_tween_scale = {type = "colour"},
		colour_tween_wait = {type = "colour"},
		restrict_rotations_to_360 = {type = "boolean"},
		tween_action_type_dialog = {type = "boolean"},
		tween_part_dialog = {type = "boolean"},
		tween_extra_add_buttons = {type = "boolean"},
		default_path_load_directory = {type = "path"},
		default_path_load_zip = {type = "path"},
		default_path_load_file = {type = "path"},
		default_path_export = {type = "path"},
		default_path_export_overwrite = {type = "path"},
		default_path_import_models = {type = "path"},
		default_path_import_model_data = {type = "path"},
		default_path_save_tween = {type = "path"},
		import_changes_from_zip = {type = "boolean"},
		create_folder_on_export = {type = "boolean"},
		confirm_file_overwrite = {type = "boolean"},
		ask_before_overwriting_tween_file = {type = "boolean"},
		auto_set_tween_preview_prop = {type = "boolean"},
		ignore_char_limit = {type = "boolean"},
		import_level_changes = {type = "boolean"},
		import_event_changes = {type = "boolean"},
		import_model_changes = {type = "boolean"},
		import_beat_changes = {type = "boolean"},
		degeomance_sequence = {type = "string"},
		degeomance_glitched_enemy = {type = "string"},
		degeomance_skull = {type = "string"},
		confirm_degeomance = {type = "boolean"},
		tween_timeline_bar_height = {type = "number"},
		hide_model_count = {type = "boolean"},
		default_transform_name = {type = "string"},
		use_default_transform_name = {type = "boolean"},
		root_transform_default_name = {type = "string"},
		add_root_transform_if_missing = {type = "boolean"},
		allow_tweening_base_transform = {type = "boolean"},
		confirm_transform_delete = {type = "boolean"},
		allow_mesh_delete = {type = "boolean"},
		show_transform_edit_warning = {type = "boolean"},
		default_camera_rotation = {type = "number"},
		default_camera_pitch = {type = "angle_pitch"},
		default_model_z_position = {type = "number"},
		mesh_flash_time = {type = "number"},
		mesh_flash_frequency = {type = "number"},
		mesh_flash_colour = {type = "colour_full"},
		custom_colour_main = {type = "hex_colour"},
		custom_colour_fog = {type = "hex_colour"},
		custom_colour_glow = {type = "hex_colour"},
		custom_colour_enemy = {type = "hex_colour"},
		model_show_grid = {type = "one_two_three"},
		bulk_sequence_sort = {type = "boolean"},
		add_opens_edit_box = {type = "boolean"},
		easing_node_scale = {type = "number"},
		easing_curve_thickness = {type = "number"},
		easing_node_colour = {type = "colour"},
		easing_node_highlight_colour = {type = "colour"},
		easing_curve_colour = {type = "colour"},
		rotate_multiple_axes = {type = "boolean"},
		default_rotation_rounding = {type = "number"}
	}
	local parse = {}
	function parse.number(str) return tonumber(str) end
	function parse.integer(str) return math.floor(tonumber(str)) end
	function parse.boolean(str)
		if string.lower(str) == "true" then
			return true
		elseif string.lower(str) == "false" then
			return false
		end
	end
	function parse.colour(str)
		local comma_1 = string.find(str, ",")
		local comma_2 = string.find(str, ",", comma_1 + 1)
		local x = string.sub(str, 1, comma_1 - 1)
		local y = string.sub(str, comma_1 + 1, comma_2 - 1)
		local z = string.sub(str, comma_2 + 1)
		return vmath.vector4(tonumber(x), tonumber(y), tonumber(z), 1)
	end
	function parse.colour_full(str)
		local comma_1 = string.find(str, ",")
		local comma_2 = string.find(str, ",", comma_1 + 1)
		local comma_3 = string.find(str, ",", comma_2 + 1)
		local x = string.sub(str, 1, comma_1 - 1)
		local y = string.sub(str, comma_1 + 1, comma_2 - 1)
		local z = string.sub(str, comma_2 + 1, comma_3 - 1)
		local a = string.sub(str, comma_3 + 1)
		return vmath.vector4(tonumber(x), tonumber(y), tonumber(z), tonumber(a))
	end
	function parse.path(str) return str end
	function parse.non_zero(str)
		local n = tonumber(str)
		if n > 0 then
			return n
		end
	end
	function parse.hex_colour(str)
		return COL.str_to_colour(str)
	end
	function parse.angle_pitch(str)
		return math.max(-90, math.min(tonumber(str), 90))
	end
	function parse.one_two_three(str) return math.min(3, math.max(1, math.floor(tonumber(str)))) end
	function parse.string(str) return str end

	for line in io.lines("geomancer.cfg") do
		local equals = string.find(line, "=")
		if equals then
			local semicolon = string.find(line, ";")
			if semicolon then
				local setting_name = string.sub(line, 1, equals - 1)
				local str = string.sub(line, equals + 1, semicolon - 1)
				if settings_to_load[setting_name] then
					local works, value = pcall(parse[settings_to_load[setting_name].type], str)
					if works then
						SET[setting_name] = value
					end
				elseif setting_name == "I_am_Klear" then
					SET.I_am_Klear = true
				end
			end
		end
	end
	if sys.exists("geomancer.cfg_old") then
		os.remove("geomancer.cfg_old")
	end
	os.rename("geomancer.cfg", "geomancer.cfg_old")
end

function init(self)
	msg.post("#main", hash("async_load"))
	local create_cfg = true
	if sys.exists("geomancer.cfg") then
		local f = io.open("geomancer.cfg", "rb")
		if f then
			local data = f:read("*a")
			io.close(f)
			local err, json_data = pcall(json.decode, data)
			if err then
				for key, val in pairs(json_data) do
					if type(val) == "table" then
						SET[key] = vmath.vector4(val[1], val[2], val[3], val[4])
					else
						SET[key] = val
					end
				end
				SET.show_transform_edit_warning = SET.default_show_transform_edit_warning
				SET.model_show_grid = SET.default_model_show_grid
				SET.show_transform = SET.default_show_transform
				SET.new_event_sample_offset = SET.default_new_event_sample_offset
				SET.create_folder_on_export = SET.default_create_folder_on_export
				SET.import_changes_from_zip = SET.default_import_changes_from_zip
				SET.import_level_changes = SET.default_import_level_changes
				SET.import_event_changes = SET.default_import_event_changes
				SET.import_model_changes = SET.default_import_model_changes
				SET.import_beat_changes = SET.default_import_beat_changes
				SET.tween_time_in_beats = SET.default_tween_time_in_beats
				create_cfg = false
			else
				load_old_config()
				SET.old_config = true
			end
		end
	end
	if create_cfg then
		SET.save_config()
		SET.config_created = true
	end
	settings_are_loaded = true
	start()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		proxy_is_loaded = true
		start()
	end
end