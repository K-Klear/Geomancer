local UI = require("modules/ui")

local string_start = "{\"NORMALSection\":[{\"name\":\"Empty\",\"distance\":\"-12\",\"properties\":[{\"startUnit\":\"-12\"}]}],\"Volume\":["
local string_end = "],\"Decor\":[],\"DecorGroups\":[]}"
local vol_1 = "{\"type\":\""
local vol_1b= "\",\"offset\":\"("
local vol_2 = ")\",\"scale\":\"("
local vol_3 = ")\",\"worldPosition\":\"("
local vol_4 = ")\",\"localScale\":\"("
local vol_5 = ")\",\"groupIndex\":\""
local vol_6 = "\",\"processingOrder\":\""
local vol_7 = "\"}"

local walkway = "{\"type\":\"Subtractive\",\"offset\":\"(-1, -1, -4)\",\"scale\":\"(2, 1, 250)\",\"worldPosition\":\"(0.00, -0.25, 60.50)\",\"localScale\":\"(1.00, 0.50, 125.00)\",\"groupIndex\":\"1\",\"processingOrder\":\"1000\"},"

local comma = ", "
local volume_type = {[true] = "Additive", [false] = "Subtractive"}

local image_data = {}
local MAX_Z = 3600

local filter = 0
local filter_threshold = 128
local invert = false
local create_additive = true
local create_subtractive = false
local delete_walkway = false
local walkway_seconds = 60

local MIN_X, MAX_X, MIN_Y, MAX_Y = -84, 82, -80, 85
local min_x, max_x, min_y, max_y = MIN_X, MAX_X, MIN_Y, MAX_Y

local offset_x, offset_y = 0, 0
local path_centre

local z_depth = 1
local processing_order = "1500"

local starting_group_index = 1
local separate_group_index = true

local volumes = {}

local preview_node, message_box, crop_stencil, range_box
local current_preview = 0
local show_path = true


local function is_geo(pixels, width, x, y)
	local index = y * width * 4 + x * 4 + 1
	local value = pixels[index + filter]
	if invert then
		return value < filter_threshold
	end
	return value > filter_threshold
end

local function get_volume(pos_x, pos_y, pos_z, scale_x, scale_y, scale_z, group_index, is_additive)
	local vol = vol_1..volume_type[is_additive]..vol_1b..tostring(pos_x)..comma..tostring(pos_y)..comma..tostring(pos_z)..vol_2..tostring(scale_x)..comma..tostring(scale_y)..comma..tostring(scale_z)
	vol = vol..vol_3..tostring(((scale_x * 0.5) + pos_x) * 0.5)..comma..tostring(((scale_y * 0.5) + pos_y) * 0.5)..comma..tostring(((scale_z * 0.5) + pos_z) * 0.5)
	vol = vol..vol_4..tostring(scale_x * 0.5)..comma..tostring(scale_y * 0.5)..comma..tostring(scale_z * 0.5)..vol_5..group_index..vol_6..processing_order..vol_7
	return vol
end

local function add_warning(err)

end

local function set_preview_image(image)
	current_preview = image or current_preview
	gui.set_texture(preview_node, tostring(image_data[current_preview].z))
	gui.set_text(gui.get_node("preview_label"), "Z position: "..tostring(image_data[current_preview].z))
end

local function load_images()
	for key, val in ipairs(image_data) do
		gui.delete_texture(tostring(val.z))
	end
	image_data = {}
	for z = -16, MAX_Z do
		local filename = "input/"..tostring(z)..".png"
		local f = io.open(filename, "rb")
		if f then
			local image = f:read("*a")
			local buf, w, h = png.decode_rgba(image, true)
			if not (w == 167 and h == 166) then
				add_warning(hash("wrong_size_image"))
			else
				local pixels = buffer.get_stream(buf, hash("pixels"))
				gui.new_texture(tostring(z), w, h, "rgba", buffer.get_bytes(buf, hash("pixels")), true)
				table.insert(image_data, {pixels = pixels, w = w, h = h, z = z})
			end
			io.close(f)
		end
	end
	if #image_data < 1 then
		gui.set_text(message_box, "No files found in the input directory.")
	else
		gui.set_text(message_box, tostring(#image_data).." images loaded.")
		set_preview_image(1)
	end
end

local function divide_picture(index, group_index)
	local pixel_values = {}
	local width = max_x - min_x + 1
	local height = max_y - min_y + 1
	local volume_created = false
	for i = 1, width * height do
		local x = (i - 1) % width + (min_x - MIN_X)
		local y = math.floor((i - 1) / width) + (min_y - MIN_Y)
		table.insert(pixel_values, is_geo(image_data[index].pixels, image_data[index].w, x, y))
	end
	for starting_pixel = 1, width * height do
		if not (pixel_values[starting_pixel] == nil) then
			local volume_width = 1
			local volume_height = 0
			local is_additive = pixel_values[starting_pixel]
			pixel_values[starting_pixel] = nil
			repeat
				if (starting_pixel + volume_width - 1) % width == 0 then
					break
				end
				if pixel_values[starting_pixel + volume_width] == is_additive then
					pixel_values[starting_pixel + volume_width] = nil
					volume_width = volume_width + 1
				else
					break
				end
			until false
			local height_found
			repeat
				volume_height = volume_height + 1
				for i = 1, volume_width do
					if not (pixel_values[starting_pixel + width * volume_height + i - 1] == is_additive) then
						height_found = true
						break
					end
				end
				if not height_found then
					for i = 1, volume_width do
						pixel_values[starting_pixel + width * volume_height + i - 1] = nil
					end
				end
			until height_found
			if (is_additive and create_additive) or (create_subtractive and not is_additive) then
				local x = min_x + offset_x + (starting_pixel - 1) % width
				local y = min_y + offset_y + math.floor(starting_pixel / width)
				table.insert(volumes, get_volume(x, y, image_data[index].z, volume_width, volume_height, z_depth, group_index, is_additive))
				volume_created = true
			end
		end
	end
	return volume_created
end

function init(self)
	msg.post("#", hash("disable"))
	preview_node = gui.get_node("preview")
	message_box = gui.get_node("message_box")
	crop_stencil = gui.get_node("crop_stencil")
	range_box = gui.get_node("range_box")
	path_centre = gui.get_position(gui.get_node("player_path"))
end

local function update_button(button)
	if button.pressed_now then
		gui.play_flipbook(button.node, hash("button_pressed"))
	elseif button.released_now then
		gui.play_flipbook(button.node, hash("button_normal"))
	elseif not button.pressed and button.over_now then
		gui.play_flipbook(button.node, hash("button_over"))
	elseif not button.pressed and button.out_now then
		gui.play_flipbook(button.node, hash("button_normal"))
	end
end

local function set_stencil_size()
	local w = (max_x - min_x + 1) * 3
	local h = (max_y - min_y + 1) * 3
	local x = -250.5 + (min_x + math.abs(MIN_X)) * 3
	local y = -249 + (min_y + math.abs(MIN_Y)) * 3
	gui.set_size(crop_stencil, vmath.vector3(w, h, 1))
	gui.set_position(crop_stencil, vmath.vector3(x, y, 0))
	gui.set_position(range_box, vmath.vector3(min_x * -3 -252, min_y * -3 - 239.5, 0))
end

local function node_text_to_number(node)
	return tonumber(gui.get_text(gui.get_node(node)))
end

local function evaluate_input(field, text)
	local value
	local text_node = gui.get_node(field.."/text")
	if field == "depth" then
		value = tonumber(text)
		if not value or value < 1 then
			value = 1
		end
		z_depth = value
		gui.set_text(text_node, value)
	elseif field == "min_x" then
		value = tonumber(text) or 0
		local max_value = node_text_to_number("max_x/text")
		if value > max_value then
			value = max_value
		elseif value < MIN_X then
			value = MIN_X
		end
		min_x = value
		gui.set_text(text_node, value)
		set_stencil_size()
	elseif field == "min_y" then
		value = tonumber(text) or 0
		local max_value = node_text_to_number("max_y/text")
		if value > max_value then
			value = max_value
		elseif value < MIN_Y then
			value = MIN_Y
		end
		min_y = value
		gui.set_text(text_node, value)
		set_stencil_size()
	elseif field == "max_x" then
		value = tonumber(text) or 0
		local min_value = node_text_to_number("min_x/text")
		if value > MAX_X then
			value = MAX_X
		elseif value < min_value then
			value = min_value
		end
		max_x = value
		gui.set_text(text_node, value)
		set_stencil_size()
	elseif field == "max_y" then
		value = tonumber(text) or 0
		local min_value = node_text_to_number("min_y/text")
		if value > MAX_Y then
			value = MAX_Y
		elseif value < min_value then
			value = min_value
		end
		max_y = value
		gui.set_text(text_node, value)
		set_stencil_size()
	elseif field == "processing_order" then
		value = tonumber(text) or 0
		gui.set_text(text_node, value)
		processing_order = value
	elseif field == "offset_x" then
		value = tonumber(text) or 0
		if value > 82 then
			value = 82
		elseif value < -82 then
			value = -82
		end
		gui.set_text(text_node, value)
		offset_x = value
		gui.set_position(gui.get_node("player_path"), vmath.vector3(path_centre.x - (offset_x * 3), path_centre.y - (offset_y * 3), 0))
	elseif field == "offset_y" then
		value = tonumber(text) or 0
		if value > 82 then
			value = 82
		elseif value < -82 then
			value = -82
		end
		gui.set_text(text_node, value)
		offset_y = value
		gui.set_position(gui.get_node("player_path"), vmath.vector3(path_centre.x - (offset_x * 3), path_centre.y - (offset_y * 3), 0))
	elseif field == "group_index" then
		value = tonumber(text) or 0
		if value < 1 then
			value = 1
		end
		gui.set_text(text_node, value)
		starting_group_index = value
	end
end


local text_field_button_data = {}
text_field_button_data.min_x_down = {change = -1, node_id = "min_x"}
text_field_button_data.min_x_up = {change = 1, node_id = "min_x"}
text_field_button_data.max_x_down = {change = -1, node_id = "max_x"}
text_field_button_data.max_x_up = {change = 1, node_id = "max_x"}
text_field_button_data.min_y_down = {change = -1, node_id = "min_y"}
text_field_button_data.min_y_up = {change = 1, node_id = "min_y"}
text_field_button_data.max_y_down = {change = -1, node_id = "max_y"}
text_field_button_data.max_y_up = {change = 1, node_id = "max_y"}
text_field_button_data.depth_up = {change = 1, node_id = "depth"}
text_field_button_data.depth_down = {change = -1, node_id = "depth"}
text_field_button_data.offset_x_down = {change = -1, node_id = "offset_x"}
text_field_button_data.offset_x_up = {change = 1, node_id = "offset_x"}
text_field_button_data.offset_y_down = {change = -1, node_id = "offset_y"}
text_field_button_data.offset_y_up = {change = 1, node_id = "offset_y"}

local function evaluate_button(button)
	local checkbox_text = {[true] = "X", [false] = ""}
	if button == "create" then
		if #image_data < 1 then
			gui.set_text(message_box, "No images loaded.")
		elseif not (create_additive or create_subtractive) then
			gui.set_text(message_box, "No volumes created. Select additive or subtractive to generate volumes.")
		else
			volumes = {}
			local group_index = starting_group_index
			if delete_walkway then
				group_index = group_index + 1
			end
			for index, val in ipairs(image_data) do
				if divide_picture(index, group_index) and separate_group_index then
					group_index = group_index + 1
				end
			end
			if #volumes > 1 then
				gui.set_text(message_box, #volumes.." volumes created.")
			elseif #volumes == 1 then
				gui.set_text(message_box, "One volume created.")
			else
				gui.set_text(message_box, "No volumes created for some reason.")
			end
			local output_string = ""
			for key, val in ipairs(volumes) do
				output_string = output_string..val
				if key < #volumes then
					output_string = output_string..","
				end
			end
			local f
			if delete_walkway then
				f = io.output("output/volume_data.txt")
				io.write(walkway..output_string)
				io.close(f)
				f = io.output("output/do_not_ship.pw_meta")
				io.write(string_start..walkway..output_string..string_end)
				io.close(f)
			else
				f = io.output("output/volume_data.txt")
				io.write(output_string)
				io.close(f)
				f = io.output("output/do_not_ship.pw_meta")
				io.write(string_start..output_string..string_end)
				io.close(f)
			end
		end
	elseif button == "load_images" then
		load_images()
	elseif button == "geo_main_menu" then
		msg.post(".", hash("disable"))
		UI.unload_template()
		msg.post("#splash", hash("mode_switched"))
	elseif button == "left" then
		if current_preview > 1 then
			current_preview = current_preview - 1
			set_preview_image()
		end
	elseif button == "right" then
		if current_preview < #image_data then
			current_preview = current_preview + 1
			set_preview_image()
		end
	elseif button == "additive" then
		create_additive = not create_additive
		gui.set_text(gui.get_node(button.."/text"), checkbox_text[create_additive])
	elseif button == "subtractive" then
		create_subtractive = not create_subtractive
		gui.set_text(gui.get_node(button.."/text"), checkbox_text[create_subtractive])
	elseif button == "invert" then
		invert = not invert
		msg.post("@render:", hash("invert_preview"), {invert = invert})
		gui.set_text(gui.get_node(button.."/text"), checkbox_text[invert])
	elseif button == "show_path" then
		show_path = not show_path
		gui.set_text(gui.get_node(button.."/text"), checkbox_text[show_path])
		gui.set_visible(gui.get_node("player_path"), show_path)
	elseif button == "image_group" then
		separate_group_index = not separate_group_index
		gui.set_text(gui.get_node(button.."/text"), checkbox_text[separate_group_index])
	elseif button == "filter_white" then
		filter = 0
		gui.set_text(gui.get_node("filter_white/text"), "X")
		gui.set_text(gui.get_node("filter_alpha/text"), "")
	elseif button == "filter_alpha" then
		filter = 3
		gui.set_text(gui.get_node("filter_white/text"), "")
		gui.set_text(gui.get_node("filter_alpha/text"), "X")
	elseif text_field_button_data[button] then
		local data = text_field_button_data[button]
		local new_val = node_text_to_number(data.node_id.."/text") + data.change
		evaluate_input(data.node_id, tostring(new_val))
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("mode_switched") then
		UI.load_template({"load_images", "create", "geo_main_menu", "subtractive", "additive", "invert", "left", "right"})
		UI.load_template({"min_y_down", "max_y_down", "min_y_up", "max_y_up", "min_x_down", "min_x_up", "max_x_up", "max_x_down"})
		UI.load_template({"depth_down", "depth_up", "offset_x_up", "offset_x_down", "offset_y_up", "offset_y_down"})
		UI.load_template({"show_path", "filter_white", "filter_alpha", "image_group"})

		UI.load_text_field("depth", 3)
		UI.load_text_field("min_x", 3)
		UI.load_text_field("max_x", 3)
		UI.load_text_field("min_y", 3)
		UI.load_text_field("max_y", 3)
		UI.load_text_field("processing_order", 4)
		UI.load_text_field("offset_x", 3)
		UI.load_text_field("offset_y", 3)
		UI.load_text_field("group_index", 3)
		
		msg.post("#", hash("enable"))
		UI.input_enabled = true
	end
end


function on_input(self, action_id, action)
	UI.on_input(self, action_id, action, evaluate_button, evaluate_input)
end